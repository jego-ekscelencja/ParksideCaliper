
NewCzerwona3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f6c  08006f6c  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f6c  08006f6c  00007f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f74  08006f74  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f74  08006f74  00007f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f78  08006f78  00007f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006f7c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000010  08006f8c  00008010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006f8c  00008324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015752  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e6  00000000  00000000  0001d792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00020b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa1  00000000  00000000  00021f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d8f  00000000  00000000  00022ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e4d  00000000  00000000  0003bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d0b  00000000  00000000  00055ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed7e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d0  00000000  00000000  000ed824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000f2af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006f20 	.word	0x08006f20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08006f20 	.word	0x08006f20

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Caliper_ResetCapture>:
static uint8_t  bit_index;
static bool     frame_ready;
static uint8_t  raw_bits[6];

void Caliper_ResetCapture(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
    shift_reg = 0;
 8000506:	4911      	ldr	r1, [pc, #68]	@ (800054c <Caliper_ResetCapture+0x4c>)
 8000508:	f04f 0200 	mov.w	r2, #0
 800050c:	f04f 0300 	mov.w	r3, #0
 8000510:	e9c1 2300 	strd	r2, r3, [r1]
    bit_index = 0;
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <Caliper_ResetCapture+0x50>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
    frame_ready = false;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <Caliper_ResetCapture+0x54>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; ++i) raw_bits[i] = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e007      	b.n	8000536 <Caliper_ResetCapture+0x36>
 8000526:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <Caliper_ResetCapture+0x58>)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b05      	cmp	r3, #5
 800053a:	ddf4      	ble.n	8000526 <Caliper_ResetCapture+0x26>
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000030 	.word	0x20000030
 8000550:	20000038 	.word	0x20000038
 8000554:	20000039 	.word	0x20000039
 8000558:	2000003c 	.word	0x2000003c

0800055c <Caliper_ProcessBit>:

/* ISR: wywołuj JEDEN raz na każde opadające zbocze CLK */
void Caliper_ProcessBit(uint8_t bit)
{
 800055c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	4601      	mov	r1, r0
 8000566:	73f9      	strb	r1, [r7, #15]
    if (frame_ready) return;                    /* czekamy, aż main() odbierze */
 8000568:	492e      	ldr	r1, [pc, #184]	@ (8000624 <Caliper_ProcessBit+0xc8>)
 800056a:	7809      	ldrb	r1, [r1, #0]
 800056c:	2900      	cmp	r1, #0
 800056e:	d152      	bne.n	8000616 <Caliper_ProcessBit+0xba>

    shift_reg |= ((uint64_t)(bit & 1)) << bit_index; /* LSB-first */
 8000570:	7bf9      	ldrb	r1, [r7, #15]
 8000572:	2000      	movs	r0, #0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6839      	ldr	r1, [r7, #0]
 800057a:	f001 0801 	and.w	r8, r1, #1
 800057e:	f04f 0900 	mov.w	r9, #0
 8000582:	4929      	ldr	r1, [pc, #164]	@ (8000628 <Caliper_ProcessBit+0xcc>)
 8000584:	7809      	ldrb	r1, [r1, #0]
 8000586:	f1a1 0620 	sub.w	r6, r1, #32
 800058a:	f1c1 0020 	rsb	r0, r1, #32
 800058e:	fa09 f301 	lsl.w	r3, r9, r1
 8000592:	fa08 f606 	lsl.w	r6, r8, r6
 8000596:	4333      	orrs	r3, r6
 8000598:	fa28 f000 	lsr.w	r0, r8, r0
 800059c:	4303      	orrs	r3, r0
 800059e:	fa08 f201 	lsl.w	r2, r8, r1
 80005a2:	4922      	ldr	r1, [pc, #136]	@ (800062c <Caliper_ProcessBit+0xd0>)
 80005a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80005a8:	ea42 0a00 	orr.w	sl, r2, r0
 80005ac:	ea43 0b01 	orr.w	fp, r3, r1
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <Caliper_ProcessBit+0xd0>)
 80005b2:	e9c3 ab00 	strd	sl, fp, [r3]
    ++bit_index;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <Caliper_ProcessBit+0xcc>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <Caliper_ProcessBit+0xcc>)
 80005c0:	701a      	strb	r2, [r3, #0]

    if (bit_index >= CALIPER_TOTAL_BITS) {
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <Caliper_ProcessBit+0xcc>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b17      	cmp	r3, #23
 80005c8:	d926      	bls.n	8000618 <Caliper_ProcessBit+0xbc>
        for (int i = 0; i < 6; ++i)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e01b      	b.n	8000608 <Caliper_ProcessBit+0xac>
            raw_bits[i] = (shift_reg >> (8*i)) & 0xFF;
 80005d0:	4b16      	ldr	r3, [pc, #88]	@ (800062c <Caliper_ProcessBit+0xd0>)
 80005d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d6:	6979      	ldr	r1, [r7, #20]
 80005d8:	00c9      	lsls	r1, r1, #3
 80005da:	f1c1 0620 	rsb	r6, r1, #32
 80005de:	f1a1 0020 	sub.w	r0, r1, #32
 80005e2:	fa22 f401 	lsr.w	r4, r2, r1
 80005e6:	fa03 f606 	lsl.w	r6, r3, r6
 80005ea:	4334      	orrs	r4, r6
 80005ec:	fa23 f000 	lsr.w	r0, r3, r0
 80005f0:	4304      	orrs	r4, r0
 80005f2:	fa23 f501 	lsr.w	r5, r3, r1
 80005f6:	b2e1      	uxtb	r1, r4
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <Caliper_ProcessBit+0xd4>)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	460a      	mov	r2, r1
 8000600:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 6; ++i)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	2b05      	cmp	r3, #5
 800060c:	dde0      	ble.n	80005d0 <Caliper_ProcessBit+0x74>
        frame_ready = true;
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <Caliper_ProcessBit+0xc8>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	e000      	b.n	8000618 <Caliper_ProcessBit+0xbc>
    if (frame_ready) return;                    /* czekamy, aż main() odbierze */
 8000616:	bf00      	nop
    }
}
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000039 	.word	0x20000039
 8000628:	20000038 	.word	0x20000038
 800062c:	20000030 	.word	0x20000030
 8000630:	2000003c 	.word	0x2000003c

08000634 <Caliper_FrameReady>:

bool Caliper_FrameReady(void) { return frame_ready; }
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <Caliper_FrameReady+0x14>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000039 	.word	0x20000039

0800064c <Raw24_To_Um>:
 *      bits 15..0  : licznik setnych mm  (×10 µm)
 *      bit  20     : znak (1 = liczba ujemna)
 *      reszta      : 0
 * ────────────────────────────────────────────────────────── */
static int32_t Raw24_To_Um(uint32_t raw24)
{
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    const uint32_t SIGN_MASK = 0x100000u;        /* 1 << 20 */
 8000654:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000658:	613b      	str	r3, [r7, #16]

    bool     negative = (raw24 & SIGN_MASK) != 0; /* bit znaku */
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	4013      	ands	r3, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf14      	ite	ne
 8000664:	2301      	movne	r3, #1
 8000666:	2300      	moveq	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
    uint32_t ticks    =  raw24 & 0xFFFFu;         /* 0 … 65535 */
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	b29b      	uxth	r3, r3
 800066e:	60bb      	str	r3, [r7, #8]

    int32_t um = (int32_t)ticks * 10;             /* 0,01 mm → 10 µm */
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	4613      	mov	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	617b      	str	r3, [r7, #20]
    if (negative) um = -um;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <Raw24_To_Um+0x3c>
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	425b      	negs	r3, r3
 8000686:	617b      	str	r3, [r7, #20]

    return um;
 8000688:	697b      	ldr	r3, [r7, #20]
}
 800068a:	4618      	mov	r0, r3
 800068c:	371c      	adds	r7, #28
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <Caliper_ExtractValues>:



void Caliper_ExtractValues(int32_t *rel_um, int32_t *abs_um)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    /* pierwsze 24 bity = REL */
    uint32_t raw24 =  (uint32_t)raw_bits[0]
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <Caliper_ExtractValues+0x40>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
                    | ((uint32_t)raw_bits[1] <<  8)
 80006a8:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <Caliper_ExtractValues+0x40>)
 80006aa:	785b      	ldrb	r3, [r3, #1]
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	431a      	orrs	r2, r3
                    | ((uint32_t)raw_bits[2] << 16);
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <Caliper_ExtractValues+0x40>)
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	041b      	lsls	r3, r3, #16
    uint32_t raw24 =  (uint32_t)raw_bits[0]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]

    *rel_um = Raw24_To_Um(raw24);
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff ffc6 	bl	800064c <Raw24_To_Um>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
    *abs_um = 0;                /* druga ramka zostaje na potem */
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]

    Caliper_ResetCapture();
 80006cc:	f7ff ff18 	bl	8000500 <Caliper_ResetCapture>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000003c 	.word	0x2000003c

080006dc <Display_Init>:

//
// Funkcja inicjująca
//
void Display_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
    // Latch w stan niski (niekoniecznie wymagane, ale można tak zacząć)
    HAL_GPIO_WritePin(SPI2_LA_GPIO_Port, SPI2_LA_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e8:	480f      	ldr	r0, [pc, #60]	@ (8000728 <Display_Init+0x4c>)
 80006ea:	f001 fec3 	bl	8002474 <HAL_GPIO_WritePin>

    // Wyzerowanie obu buforów (blank)
    for (int i = 0; i < DISPLAY_DIGITS; i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e00e      	b.n	8000712 <Display_Init+0x36>
    {
        frontBuffer[i] = segmentDigits[10]; // blank
 80006f4:	2100      	movs	r1, #0
 80006f6:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <Display_Init+0x50>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	460a      	mov	r2, r1
 80006fe:	701a      	strb	r2, [r3, #0]
        backBuffer[i]  = segmentDigits[10]; // blank
 8000700:	2100      	movs	r1, #0
 8000702:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <Display_Init+0x54>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	460a      	mov	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DISPLAY_DIGITS; i++)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b05      	cmp	r3, #5
 8000716:	dded      	ble.n	80006f4 <Display_Init+0x18>
    }

    display_needs_update = 1;  // bo mamy gotowy "obraz" do wyświetlenia
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <Display_Init+0x58>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40020800 	.word	0x40020800
 800072c:	20000044 	.word	0x20000044
 8000730:	2000004c 	.word	0x2000004c
 8000734:	20000052 	.word	0x20000052

08000738 <Display_RefreshIfNeeded>:
// Funkcja sprawdzająca, czy w backBuffer jest nowa wartość
// i jeśli tak – kopiuje do frontBuffer.
// Po tej operacji frontBuffer jest gotowy do wysłania przez SPI.
//
void Display_RefreshIfNeeded(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
    if (display_needs_update)
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <Display_RefreshIfNeeded+0x2c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d009      	beq.n	800075a <Display_RefreshIfNeeded+0x22>
    {
        // Kopiowanie back->front
        memcpy((uint8_t*)frontBuffer, (const uint8_t*)backBuffer, DISPLAY_DIGITS);
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <Display_RefreshIfNeeded+0x30>)
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <Display_RefreshIfNeeded+0x34>)
 800074a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	3304      	adds	r3, #4
 8000752:	8019      	strh	r1, [r3, #0]

        // Można wyczyścić flagę (bufor skopiowany)
        display_needs_update = 0;
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <Display_RefreshIfNeeded+0x2c>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
    }
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000052 	.word	0x20000052
 8000768:	20000044 	.word	0x20000044
 800076c:	2000004c 	.word	0x2000004c

08000770 <Display_GetFrontBuffer>:
//
// Funkcja zwraca wskaźnik na frontBuffer
// (zawiera aktualne dane do wysyłki).
//
uint8_t* Display_GetFrontBuffer(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
    return (uint8_t*)frontBuffer;
 8000774:	4b02      	ldr	r3, [pc, #8]	@ (8000780 <Display_GetFrontBuffer+0x10>)
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	20000044 	.word	0x20000044

08000784 <Display_ShowMicrometers>:
 *  Wyświetl liczbę w µm jako  x.xxx  /  xx.xx  /  xxx.x  /  xxxx   (±999.99 mm)
 *  Układ bufora: LSB-first – backBuffer[0] = 0.01 mm,  …,  backBuffer[5] = MSB
 *  segmentDigits[10] = blank ,  segmentDigits[11] = '-' ,  SEG_DP = 0x80
 * ======================================================================== */
void Display_ShowMicrometers(int32_t value_um)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	@ 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    /* 1. wyczyść bufor */
    for (int i = 0; i < DISPLAY_DIGITS; ++i)
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	e008      	b.n	80007a4 <Display_ShowMicrometers+0x20>
        backBuffer[i] = segmentDigits[10];           /* blank */
 8000792:	2100      	movs	r1, #0
 8000794:	4a57      	ldr	r2, [pc, #348]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	460a      	mov	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DISPLAY_DIGITS; ++i)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3301      	adds	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	2b05      	cmp	r3, #5
 80007a8:	ddf3      	ble.n	8000792 <Display_ShowMicrometers+0xe>

    /* 2. znak */
    bool negative = (value_um < 0);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	0fdb      	lsrs	r3, r3, #31
 80007ae:	73fb      	strb	r3, [r7, #15]
    if (negative) value_um = -value_um;              /* wartość dodatnia */
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <Display_ShowMicrometers+0x38>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	425b      	negs	r3, r3
 80007ba:	607b      	str	r3, [r7, #4]

    /* 3. setne mm (0,01 mm) */
    uint32_t cmm = (uint32_t)value_um / 10;          /* 1 krok = 0,01 mm */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a4e      	ldr	r2, [pc, #312]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 80007c0:	fba2 2303 	umull	r2, r3, r2, r3
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	61bb      	str	r3, [r7, #24]
    int idx = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

    /* 0,01 mm i 0,1 mm */
    backBuffer[idx++] = segmentDigits[cmm % 10]; cmm /= 10;    /* 0,01 */
 80007cc:	69b9      	ldr	r1, [r7, #24]
 80007ce:	4b4a      	ldr	r3, [pc, #296]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 80007d0:	fba3 2301 	umull	r2, r3, r3, r1
 80007d4:	08da      	lsrs	r2, r3, #3
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	1aca      	subs	r2, r1, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	1c59      	adds	r1, r3, #1
 80007e4:	6179      	str	r1, [r7, #20]
 80007e6:	4945      	ldr	r1, [pc, #276]	@ (80008fc <Display_ShowMicrometers+0x178>)
 80007e8:	5c89      	ldrb	r1, [r1, r2]
 80007ea:	4a42      	ldr	r2, [pc, #264]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 80007ec:	54d1      	strb	r1, [r2, r3]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	4a41      	ldr	r2, [pc, #260]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 80007f2:	fba2 2303 	umull	r2, r3, r2, r3
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	61bb      	str	r3, [r7, #24]
    backBuffer[idx++] = segmentDigits[cmm % 10]; cmm /= 10;    /* 0,1  */
 80007fa:	69b9      	ldr	r1, [r7, #24]
 80007fc:	4b3e      	ldr	r3, [pc, #248]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 80007fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000802:	08da      	lsrs	r2, r3, #3
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	1aca      	subs	r2, r1, r3
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	1c59      	adds	r1, r3, #1
 8000812:	6179      	str	r1, [r7, #20]
 8000814:	4939      	ldr	r1, [pc, #228]	@ (80008fc <Display_ShowMicrometers+0x178>)
 8000816:	5c89      	ldrb	r1, [r1, r2]
 8000818:	4a36      	ldr	r2, [pc, #216]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 800081a:	54d1      	strb	r1, [r2, r3]
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	4a36      	ldr	r2, [pc, #216]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 8000820:	fba2 2303 	umull	r2, r3, r2, r3
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	61bb      	str	r3, [r7, #24]

    /* 1 mm – z kropką */
    backBuffer[idx++] = segmentDigits[cmm % 10] | SEG_DP; cmm /= 10;
 8000828:	69b9      	ldr	r1, [r7, #24]
 800082a:	4b33      	ldr	r3, [pc, #204]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 800082c:	fba3 2301 	umull	r2, r3, r3, r1
 8000830:	08da      	lsrs	r2, r3, #3
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	1aca      	subs	r2, r1, r3
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <Display_ShowMicrometers+0x178>)
 800083e:	5c9a      	ldrb	r2, [r3, r2]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	1c59      	adds	r1, r3, #1
 8000844:	6179      	str	r1, [r7, #20]
 8000846:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800084a:	b2d1      	uxtb	r1, r2
 800084c:	4a29      	ldr	r2, [pc, #164]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 800084e:	54d1      	strb	r1, [r2, r3]
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	4a29      	ldr	r2, [pc, #164]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	61bb      	str	r3, [r7, #24]

    /* dziesiątki, setki… mm */
    while (idx < DISPLAY_DIGITS && cmm) {
 800085c:	e016      	b.n	800088c <Display_ShowMicrometers+0x108>
        backBuffer[idx++] = segmentDigits[cmm % 10];
 800085e:	69b9      	ldr	r1, [r7, #24]
 8000860:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 8000862:	fba3 2301 	umull	r2, r3, r3, r1
 8000866:	08da      	lsrs	r2, r3, #3
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	1aca      	subs	r2, r1, r3
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	1c59      	adds	r1, r3, #1
 8000876:	6179      	str	r1, [r7, #20]
 8000878:	4920      	ldr	r1, [pc, #128]	@ (80008fc <Display_ShowMicrometers+0x178>)
 800087a:	5c89      	ldrb	r1, [r1, r2]
 800087c:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 800087e:	54d1      	strb	r1, [r2, r3]
        cmm /= 10;
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	4a1d      	ldr	r2, [pc, #116]	@ (80008f8 <Display_ShowMicrometers+0x174>)
 8000884:	fba2 2303 	umull	r2, r3, r2, r3
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	61bb      	str	r3, [r7, #24]
    while (idx < DISPLAY_DIGITS && cmm) {
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b05      	cmp	r3, #5
 8000890:	dc02      	bgt.n	8000898 <Display_ShowMicrometers+0x114>
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1e2      	bne.n	800085e <Display_ShowMicrometers+0xda>
    }

    /* 4. minus „przy liczbie”, nie na skraju */
    if (negative) {
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00e      	beq.n	80008bc <Display_ShowMicrometers+0x138>
        if (idx < DISPLAY_DIGITS)                    /* mamy wolną pozycję */
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	dc06      	bgt.n	80008b2 <Display_ShowMicrometers+0x12e>
            backBuffer[idx] = segmentDigits[11];     /* wstaw '-' tuż obok */
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	4413      	add	r3, r2
 80008ac:	460a      	mov	r2, r1
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e004      	b.n	80008bc <Display_ShowMicrometers+0x138>
        else                                         /* brak miejsca → nadpisz MSB */
            backBuffer[idx - 1] = segmentDigits[11];
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	2140      	movs	r1, #64	@ 0x40
 80008b8:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 80008ba:	54d1      	strb	r1, [r2, r3]
    }

    /* 5. overflow – jeśli po zużyciu 6 pozycji zostały jeszcze cyfry */
    if (cmm) {
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00e      	beq.n	80008e0 <Display_ShowMicrometers+0x15c>
        for (int i = 0; i < DISPLAY_DIGITS; ++i)
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	e008      	b.n	80008da <Display_ShowMicrometers+0x156>
            backBuffer[i] = segmentDigits[11];       /* same kreseczki */
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <Display_ShowMicrometers+0x170>)
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4413      	add	r3, r2
 80008d0:	460a      	mov	r2, r1
 80008d2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < DISPLAY_DIGITS; ++i)
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	3301      	adds	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	2b05      	cmp	r3, #5
 80008de:	ddf3      	ble.n	80008c8 <Display_ShowMicrometers+0x144>
    }

    display_needs_update = 1;                        /* odśwież wyświetlacz */
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <Display_ShowMicrometers+0x17c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	3724      	adds	r7, #36	@ 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	2000004c 	.word	0x2000004c
 80008f8:	cccccccd 	.word	0xcccccccd
 80008fc:	08006f38 	.word	0x08006f38
 8000900:	20000052 	.word	0x20000052

08000904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_DMA_Init+0x5c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_DMA_Init+0x5c>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_DMA_Init+0x5c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200b      	movs	r0, #11
 800092c:	f000 ffbf 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000930:	200b      	movs	r0, #11
 8000932:	f000 ffd8 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	200f      	movs	r0, #15
 800093c:	f000 ffb7 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000940:	200f      	movs	r0, #15
 8000942:	f000 ffd0 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2011      	movs	r0, #17
 800094c:	f000 ffaf 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000950:	2011      	movs	r0, #17
 8000952:	f000 ffc8 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b42      	ldr	r3, [pc, #264]	@ (8000a88 <MX_GPIO_Init+0x124>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a41      	ldr	r2, [pc, #260]	@ (8000a88 <MX_GPIO_Init+0x124>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a88 <MX_GPIO_Init+0x124>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a88 <MX_GPIO_Init+0x124>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a3a      	ldr	r2, [pc, #232]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a33      	ldr	r2, [pc, #204]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_GPIO_Init+0x124>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_LA_GPIO_Port, SPI2_LA_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f0:	4826      	ldr	r0, [pc, #152]	@ (8000a8c <MX_GPIO_Init+0x128>)
 80009f2:	f001 fd3f 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedBlue_GPIO_Port, LedBlue_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009fc:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <MX_GPIO_Init+0x12c>)
 80009fe:	f001 fd39 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_LA_Pin */
  GPIO_InitStruct.Pin = SPI2_LA_Pin;
 8000a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_LA_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481c      	ldr	r0, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0x128>)
 8000a1c:	f001 fb8e 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL_CLK_Pin */
  GPIO_InitStruct.Pin = CAL_CLK_Pin;
 8000a20:	2301      	movs	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4816      	ldr	r0, [pc, #88]	@ (8000a90 <MX_GPIO_Init+0x12c>)
 8000a36:	f001 fb81 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL_DATA_Pin */
  GPIO_InitStruct.Pin = CAL_DATA_Pin;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL_DATA_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4810      	ldr	r0, [pc, #64]	@ (8000a90 <MX_GPIO_Init+0x12c>)
 8000a4e:	f001 fb75 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : LedBlue_Pin */
  GPIO_InitStruct.Pin = LedBlue_Pin;
 8000a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LedBlue_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <MX_GPIO_Init+0x12c>)
 8000a6c:	f001 fb66 	bl	800213c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2006      	movs	r0, #6
 8000a76:	f000 ff1a 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a7a:	2006      	movs	r0, #6
 8000a7c:	f000 ff33 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020400 	.word	0x40020400

08000a94 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ae8 <MX_I2C1_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_I2C1_Init+0x58>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_I2C1_Init+0x50>)
 8000ad2:	f001 fd01 	bl	80024d8 <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f9f4 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000054 	.word	0x20000054
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	000186a0 	.word	0x000186a0

08000af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8000c4c <HAL_I2C_MspInit+0x15c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 8098 	bne.w	8000c44 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b4d      	ldr	r3, [pc, #308]	@ (8000c50 <HAL_I2C_MspInit+0x160>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c50 <HAL_I2C_MspInit+0x160>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b4a      	ldr	r3, [pc, #296]	@ (8000c50 <HAL_I2C_MspInit+0x160>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b30:	23c0      	movs	r3, #192	@ 0xc0
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b40:	2304      	movs	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4842      	ldr	r0, [pc, #264]	@ (8000c54 <HAL_I2C_MspInit+0x164>)
 8000b4c:	f001 faf6 	bl	800213c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b3e      	ldr	r3, [pc, #248]	@ (8000c50 <HAL_I2C_MspInit+0x160>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	4a3d      	ldr	r2, [pc, #244]	@ (8000c50 <HAL_I2C_MspInit+0x160>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b60:	4b3b      	ldr	r3, [pc, #236]	@ (8000c50 <HAL_I2C_MspInit+0x160>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c5c <HAL_I2C_MspInit+0x16c>)
 8000b70:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000b72:	4b39      	ldr	r3, [pc, #228]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b78:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7a:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b80:	4b35      	ldr	r3, [pc, #212]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b86:	4b34      	ldr	r3, [pc, #208]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8e:	4b32      	ldr	r3, [pc, #200]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b94:	4b30      	ldr	r3, [pc, #192]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bac:	482a      	ldr	r0, [pc, #168]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000bae:	f000 feb5 	bl	800191c <HAL_DMA_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000bb8:	f000 f986 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a26      	ldr	r2, [pc, #152]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000bc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bc2:	4a25      	ldr	r2, [pc, #148]	@ (8000c58 <HAL_I2C_MspInit+0x168>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bca:	4a26      	ldr	r2, [pc, #152]	@ (8000c64 <HAL_I2C_MspInit+0x174>)
 8000bcc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000bce:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bd4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd6:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000be4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c08:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000c0a:	f000 fe87 	bl	800191c <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8000c14:	f000 f958 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a11      	ldr	r2, [pc, #68]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000c1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_I2C_MspInit+0x170>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	201f      	movs	r0, #31
 8000c2a:	f000 fe40 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c2e:	201f      	movs	r0, #31
 8000c30:	f000 fe59 	bl	80018e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2020      	movs	r0, #32
 8000c3a:	f000 fe38 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c3e:	2020      	movs	r0, #32
 8000c40:	f000 fe51 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020400 	.word	0x40020400
 8000c58:	200000a8 	.word	0x200000a8
 8000c5c:	40026010 	.word	0x40026010
 8000c60:	20000108 	.word	0x20000108
 8000c64:	400260a0 	.word	0x400260a0

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6e:	f000 fcd1 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f82b 	bl	8000ccc <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f7ff fe75 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7a:	f7ff fe43 	bl	8000904 <MX_DMA_Init>
  MX_RTC_Init();
 8000c7e:	f000 f929 	bl	8000ed4 <MX_RTC_Init>
  MX_SPI2_Init();
 8000c82:	f000 f979 	bl	8000f78 <MX_SPI2_Init>
  MX_TIM11_Init();
 8000c86:	f000 fb73 	bl	8001370 <MX_TIM11_Init>
  MX_TIM4_Init();
 8000c8a:	f000 fb17 	bl	80012bc <MX_TIM4_Init>
  MX_I2C1_Init();
 8000c8e:	f7ff ff01 	bl	8000a94 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000c92:	f000 fc1b 	bl	80014cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000c96:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <main+0x60>)
 8000c98:	f004 fcd2 	bl	8005640 <HAL_TIM_Base_Start_IT>
  Display_Init();
 8000c9c:	f7ff fd1e 	bl	80006dc <Display_Init>
  //int32_t liczba = 0;
  Caliper_ResetCapture();  // przygotowanie do odbioru ramki
 8000ca0:	f7ff fc2e 	bl	8000500 <Caliper_ResetCapture>

	  //LED_BLUE_TOGGLE();



	  if (Caliper_FrameReady())
 8000ca4:	f7ff fcc6 	bl	8000634 <Caliper_FrameReady>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0fa      	beq.n	8000ca4 <main+0x3c>
	      {

		// Display_ShowRawHex( Caliper_GetRawBytes() );
	          int32_t rel_um, abs;
	          Caliper_ExtractValues(&rel_um, &abs);
 8000cae:	463a      	mov	r2, r7
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fcef 	bl	8000698 <Caliper_ExtractValues>
	         Caliper_ResetCapture();       // resetujemy NATYCHMIAST
 8000cba:	f7ff fc21 	bl	8000500 <Caliper_ResetCapture>


	          Display_ShowMicrometers(rel_um);  // od razu
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd5f 	bl	8000784 <Display_ShowMicrometers>
	  if (Caliper_FrameReady())
 8000cc6:	e7ed      	b.n	8000ca4 <main+0x3c>
 8000cc8:	20000290 	.word	0x20000290

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	@ 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	@ 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f006 f8f4 	bl	8006ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <SystemClock_Config+0xb8>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <SystemClock_Config+0xb8>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <SystemClock_Config+0xb8>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <SystemClock_Config+0xbc>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <SystemClock_Config+0xbc>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <SystemClock_Config+0xbc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2309      	movs	r3, #9
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d36:	2301      	movs	r3, #1
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fa1e 	bl	8004184 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d4e:	f000 f8bb 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f003 fc81 	bl	8004674 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d78:	f000 f8a6 	bl	8000ec8 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	@ 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM11)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d134      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {



        static uint8_t msCount = 0;
        msCount++;
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000da8:	701a      	strb	r2, [r3, #0]

        // Co 10 ms
        if ((msCount % 50) == 0)
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000db0:	fba2 1203 	umull	r1, r2, r2, r3
 8000db4:	0912      	lsrs	r2, r2, #4
 8000db6:	2132      	movs	r1, #50	@ 0x32
 8000db8:	fb01 f202 	mul.w	r2, r1, r2
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d121      	bne.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x7c>
        {
            if (isSpiReady)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d01c      	beq.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x7c>
            {
                // Usunięto: Display_RefreshIfNeeded();
                // Ustawienie latch na stan niski (przygotowanie rejestru do przyjęcia danych)
                HAL_GPIO_WritePin(SPI2_LA_GPIO_Port, SPI2_LA_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000dd6:	f001 fb4d 	bl	8002474 <HAL_GPIO_WritePin>

                // Pobierz wskaźnik do frontBuffer i rozpocznij transmisję DMA
                uint8_t* buf = Display_GetFrontBuffer();
 8000dda:	f7ff fcc9 	bl	8000770 <Display_GetFrontBuffer>
 8000dde:	60f8      	str	r0, [r7, #12]
                HAL_StatusTypeDef ret = HAL_SPI_Transmit_DMA(&hspi2, buf, DISPLAY_DIGITS);
 8000de0:	2206      	movs	r2, #6
 8000de2:	68f9      	ldr	r1, [r7, #12]
 8000de4:	480f      	ldr	r0, [pc, #60]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000de6:	f004 f8a3 	bl	8004f30 <HAL_SPI_Transmit_DMA>
 8000dea:	4603      	mov	r3, r0
 8000dec:	72fb      	strb	r3, [r7, #11]

                if (ret == HAL_OK)
 8000dee:	7afb      	ldrb	r3, [r7, #11]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d103      	bne.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x70>
                {
                    // Transmisja DMA rozpoczęta – oznacz, że SPI jest zajęte
                    isSpiReady = 0;
 8000df4:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
                    // Dodatkowo możesz obsłużyć błąd (np. logowanie lub sygnalizację błędu)
                }
            }
        }
    }
}
 8000dfa:	e005      	b.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x7c>
                    HAL_GPIO_WritePin(SPI2_LA_GPIO_Port, SPI2_LA_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e02:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e04:	f001 fb36 	bl	8002474 <HAL_GPIO_WritePin>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40014800 	.word	0x40014800
 8000e14:	20000168 	.word	0x20000168
 8000e18:	51eb851f 	.word	0x51eb851f
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	40020800 	.word	0x40020800
 8000e24:	20000190 	.word	0x20000190

08000e28 <HAL_SPI_TxCpltCallback>:



void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_SPI_TxCpltCallback+0x30>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10a      	bne.n	8000e50 <HAL_SPI_TxCpltCallback+0x28>
    {
        // Ustawienie latch na stan wysoki – sygnalizacja, że transmisja się zakończyła
        HAL_GPIO_WritePin(SPI2_LA_GPIO_Port, SPI2_LA_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e40:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <HAL_SPI_TxCpltCallback+0x34>)
 8000e42:	f001 fb17 	bl	8002474 <HAL_GPIO_WritePin>

        // Skopiuj zawartość backBuffer do frontBuffer, jeśli jest nowa wartość
        Display_RefreshIfNeeded();
 8000e46:	f7ff fc77 	bl	8000738 <Display_RefreshIfNeeded>

        // Oznacz, że SPI jest gotowe do kolejnej transmisji
        isSpiReady = 1;
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_SPI_TxCpltCallback+0x38>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
    }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40003800 	.word	0x40003800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	20000000 	.word	0x20000000

08000e64 <HAL_GPIO_EXTI_Callback>:
//}



void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
    if (pin != CAL_CLK_Pin) return;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d11f      	bne.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x50>

    /* NOWOŚĆ: akceptuj zbocze tylko gdy CLK jest wysoki */
    if (HAL_GPIO_ReadPin(CAL_CLK_GPIO_Port, CAL_CLK_Pin) != GPIO_PIN_SET)
 8000e74:	2101      	movs	r1, #1
 8000e76:	4812      	ldr	r0, [pc, #72]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e78:	f001 fae4 	bl	8002444 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d11a      	bne.n	8000eb8 <HAL_GPIO_EXTI_Callback+0x54>
        return;                                 // czekamy na HIGH (po RISING)

    /* pauza >3 ms → nowa ramka */
    static uint32_t last_ms = 0;
    uint32_t now_ms = HAL_GetTick();
 8000e82:	f000 fc2d 	bl	80016e0 <HAL_GetTick>
 8000e86:	60f8      	str	r0, [r7, #12]
    if (now_ms - last_ms > 3) Caliper_ResetCapture();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x60>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d901      	bls.n	8000e98 <HAL_GPIO_EXTI_Callback+0x34>
 8000e94:	f7ff fb34 	bl	8000500 <Caliper_ResetCapture>
    last_ms = now_ms;
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x60>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6013      	str	r3, [r2, #0]

    /* odczytaj bit */
    uint8_t bit = HAL_GPIO_ReadPin(CAL_DATA_GPIO_Port, CAL_DATA_Pin);
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ea2:	f001 facf 	bl	8002444 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	72fb      	strb	r3, [r7, #11]
    Caliper_ProcessBit(bit);
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fb55 	bl	800055c <Caliper_ProcessBit>
 8000eb2:	e002      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x56>
    if (pin != CAL_CLK_Pin) return;
 8000eb4:	bf00      	nop
 8000eb6:	e000      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x56>
        return;                                 // czekamy na HIGH (po RISING)
 8000eb8:	bf00      	nop
}
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	2000016c 	.word	0x2000016c

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <Error_Handler+0x8>

08000ed4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <MX_RTC_Init+0x48>)
 8000edc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000ee6:	227f      	movs	r2, #127	@ 0x7f
 8000ee8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000eec:	22ff      	movs	r2, #255	@ 0xff
 8000eee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_RTC_Init+0x44>)
 8000f04:	f003 fe84 	bl	8004c10 <HAL_RTC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f0e:	f7ff ffdb 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000170 	.word	0x20000170
 8000f1c:	40002800 	.word	0x40002800

08000f20 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <HAL_RTC_MspInit+0x50>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d111      	bne.n	8000f66 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f42:	2302      	movs	r3, #2
 8000f44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fd6f 	bl	8004a34 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f5c:	f7ff ffb4 	bl	8000ec8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_RTC_MspInit+0x54>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40002800 	.word	0x40002800
 8000f74:	42470e3c 	.word	0x42470e3c

08000f78 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f7e:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <MX_SPI2_Init+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_SPI2_Init+0x64>)
 8000fca:	f003 ff27 	bl	8004e1c <HAL_SPI_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fd4:	f7ff ff78 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000190 	.word	0x20000190
 8000fe0:	40003800 	.word	0x40003800

08000fe4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a43      	ldr	r2, [pc, #268]	@ (8001110 <HAL_SPI_MspInit+0x12c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d17f      	bne.n	8001106 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b42      	ldr	r3, [pc, #264]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a41      	ldr	r2, [pc, #260]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b3f      	ldr	r3, [pc, #252]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b3b      	ldr	r3, [pc, #236]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a3a      	ldr	r2, [pc, #232]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <HAL_SPI_MspInit+0x130>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800105a:	2308      	movs	r3, #8
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800106a:	2305      	movs	r3, #5
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4828      	ldr	r0, [pc, #160]	@ (8001118 <HAL_SPI_MspInit+0x134>)
 8001076:	f001 f861 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800107a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108c:	2305      	movs	r3, #5
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4821      	ldr	r0, [pc, #132]	@ (800111c <HAL_SPI_MspInit+0x138>)
 8001098:	f001 f850 	bl	800213c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <HAL_SPI_MspInit+0x140>)
 80010a0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010aa:	2240      	movs	r2, #64	@ 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010dc:	f000 fc1e 	bl	800191c <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80010e6:	f7ff feef 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010ee:	649a      	str	r2, [r3, #72]	@ 0x48
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <HAL_SPI_MspInit+0x13c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2024      	movs	r0, #36	@ 0x24
 80010fc:	f000 fbd7 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001100:	2024      	movs	r0, #36	@ 0x24
 8001102:	f000 fbf0 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40003800 	.word	0x40003800
 8001114:	40023800 	.word	0x40023800
 8001118:	40020800 	.word	0x40020800
 800111c:	40020400 	.word	0x40020400
 8001120:	200001e8 	.word	0x200001e8
 8001124:	40026070 	.word	0x40026070

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_MspInit+0x4c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <NMI_Handler+0x4>

08001180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <UsageFault_Handler+0x4>

080011a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 fa73 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAL_CLK_Pin);
 80011da:	2001      	movs	r0, #1
 80011dc:	f001 f964 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <DMA1_Stream0_IRQHandler+0x10>)
 80011ea:	f000 fd2f 	bl	8001c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200000a8 	.word	0x200000a8

080011f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <DMA1_Stream4_IRQHandler+0x10>)
 80011fe:	f000 fd25 	bl	8001c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001e8 	.word	0x200001e8

0800120c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <DMA1_Stream6_IRQHandler+0x10>)
 8001212:	f000 fd1b 	bl	8001c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000108 	.word	0x20000108

08001220 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001226:	f004 fabc 	bl	80057a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000290 	.word	0x20000290

08001234 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <TIM4_IRQHandler+0x10>)
 800123a:	f004 fab2 	bl	80057a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000248 	.word	0x20000248

08001248 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <I2C1_EV_IRQHandler+0x10>)
 800124e:	f001 fa9c 	bl	800278a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000054 	.word	0x20000054

0800125c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001260:	4802      	ldr	r0, [pc, #8]	@ (800126c <I2C1_ER_IRQHandler+0x10>)
 8001262:	f001 fc03 	bl	8002a6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000054 	.word	0x20000054

08001270 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <SPI2_IRQHandler+0x10>)
 8001276:	f003 ff0d 	bl	8005094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000190 	.word	0x20000190

08001284 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <USART2_IRQHandler+0x10>)
 800128a:	f004 ff4f 	bl	800612c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002d8 	.word	0x200002d8

08001298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_TIM4_Init+0xac>)
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <MX_TIM4_Init+0xb0>)
 80012e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012e4:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <MX_TIM4_Init+0xac>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_TIM4_Init+0xac>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 22183;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <MX_TIM4_Init+0xac>)
 80012f2:	f245 62a7 	movw	r2, #22183	@ 0x56a7
 80012f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <MX_TIM4_Init+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_TIM4_Init+0xac>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001304:	4818      	ldr	r0, [pc, #96]	@ (8001368 <MX_TIM4_Init+0xac>)
 8001306:	f004 f9fd 	bl	8005704 <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001310:	f7ff fdda 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800131c:	f107 0320 	add.w	r3, r7, #32
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	@ (8001368 <MX_TIM4_Init+0xac>)
 8001324:	f004 fe30 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800132e:	f7ff fdcb 	bl	8000ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	@ 0x60
 8001334:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	220c      	movs	r2, #12
 8001346:	4619      	mov	r1, r3
 8001348:	4807      	ldr	r0, [pc, #28]	@ (8001368 <MX_TIM4_Init+0xac>)
 800134a:	f004 fb1b 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001354:	f7ff fdb8 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_TIM4_Init+0xac>)
 800135a:	f000 f87d 	bl	8001458 <HAL_TIM_MspPostInit>

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	@ 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000248 	.word	0x20000248
 800136c:	40000800 	.word	0x40000800

08001370 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_TIM11_Init+0x40>)
 8001376:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <MX_TIM11_Init+0x44>)
 8001378:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 22183;
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <MX_TIM11_Init+0x40>)
 800137c:	f245 62a7 	movw	r2, #22183	@ 0x56a7
 8001380:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_TIM11_Init+0x40>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_TIM11_Init+0x40>)
 800138a:	2201      	movs	r2, #1
 800138c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_TIM11_Init+0x40>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_TIM11_Init+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_TIM11_Init+0x40>)
 800139c:	f004 f900 	bl	80055a0 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80013a6:	f7ff fd8f 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000290 	.word	0x20000290
 80013b4:	40014800 	.word	0x40014800

080013b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_TIM_PWM_MspInit+0x48>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d115      	bne.n	80013f6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <HAL_TIM_PWM_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <HAL_TIM_PWM_MspInit+0x4c>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_TIM_PWM_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201e      	movs	r0, #30
 80013ec:	f000 fa5f 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013f0:	201e      	movs	r0, #30
 80013f2:	f000 fa78 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40000800 	.word	0x40000800
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0e      	ldr	r2, [pc, #56]	@ (8001450 <HAL_TIM_Base_MspInit+0x48>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d115      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_TIM_Base_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a0c      	ldr	r2, [pc, #48]	@ (8001454 <HAL_TIM_Base_MspInit+0x4c>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_TIM_Base_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	201a      	movs	r0, #26
 800143c:	f000 fa37 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001440:	201a      	movs	r0, #26
 8001442:	f000 fa50 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40014800 	.word	0x40014800
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <HAL_TIM_MspPostInit+0x68>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11e      	bne.n	80014b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_TIM_MspPostInit+0x6c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <HAL_TIM_MspPostInit+0x6c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_TIM_MspPostInit+0x6c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800149a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <HAL_TIM_MspPostInit+0x70>)
 80014b4:	f000 fe42 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40000800 	.word	0x40000800
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400

080014cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <MX_USART2_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_USART2_UART_Init+0x4c>)
 8001504:	f004 fdc2 	bl	800608c <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f7ff fcdb 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002d8 	.word	0x200002d8
 800151c:	40004400 	.word	0x40004400

08001520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <HAL_UART_MspInit+0x94>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d133      	bne.n	80015aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_UART_MspInit+0x98>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <HAL_UART_MspInit+0x98>)
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_UART_MspInit+0x98>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_UART_MspInit+0x98>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a14      	ldr	r2, [pc, #80]	@ (80015b8 <HAL_UART_MspInit+0x98>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_UART_MspInit+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157a:	230c      	movs	r3, #12
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158a:	2307      	movs	r3, #7
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <HAL_UART_MspInit+0x9c>)
 8001596:	f000 fdd1 	bl	800213c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2026      	movs	r0, #38	@ 0x26
 80015a0:	f000 f985 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a4:	2026      	movs	r0, #38	@ 0x26
 80015a6:	f000 f99e 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015c4:	f7ff fe68 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	@ (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	@ (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f005 fc73 	bl	8006ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff fb39 	bl	8000c68 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001604:	08006f7c 	.word	0x08006f7c
  ldr r2, =_sbss
 8001608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800160c:	20000324 	.word	0x20000324

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f92b 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fd6e 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f943 	bl	8001902 <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f90b 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000004 	.word	0x20000004
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	20000008 	.word	0x20000008

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	20000320 	.word	0x20000320

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000320 	.word	0x20000320

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	@ (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff3e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff8e 	bl	80017ec <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff31 	bl	800175c <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff feda 	bl	80016e0 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e099      	b.n	8001a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001958:	e00f      	b.n	800197a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195a:	f7ff fec1 	bl	80016e0 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b05      	cmp	r3, #5
 8001966:	d908      	bls.n	800197a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e078      	b.n	8001a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1e8      	bne.n	800195a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <HAL_DMA_Init+0x158>)
 8001994:	4013      	ands	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d107      	bne.n	80019e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4313      	orrs	r3, r2
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f023 0307 	bic.w	r3, r3, #7
 80019fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d117      	bne.n	8001a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fb0f 	bl	8002044 <DMA_CheckFifoParam>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e016      	b.n	8001a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fac6 	bl	8001fd8 <DMA_CalcBaseAndBitshift>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	223f      	movs	r2, #63	@ 0x3f
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	f010803f 	.word	0xf010803f

08001a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_DMA_Start_IT+0x26>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e040      	b.n	8001b20 <HAL_DMA_Start_IT+0xa8>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d12f      	bne.n	8001b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fa58 	bl	8001f7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	223f      	movs	r2, #63	@ 0x3f
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0216 	orr.w	r2, r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0208 	orr.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e005      	b.n	8001b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b36:	f7ff fdd3 	bl	80016e0 <HAL_GetTick>
 8001b3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e052      	b.n	8001c00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0216 	bic.w	r2, r2, #22
 8001b68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <HAL_DMA_Abort+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0208 	bic.w	r2, r2, #8
 8001b98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	e013      	b.n	8001bd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bac:	f7ff fd98 	bl	80016e0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d90c      	bls.n	8001bd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e015      	b.n	8001c00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1e4      	bne.n	8001bac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	223f      	movs	r2, #63	@ 0x3f
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d004      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2280      	movs	r2, #128	@ 0x80
 8001c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00c      	b.n	8001c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2205      	movs	r2, #5
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c58:	4b8e      	ldr	r3, [pc, #568]	@ (8001e94 <HAL_DMA_IRQHandler+0x248>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e98 <HAL_DMA_IRQHandler+0x24c>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c76:	2208      	movs	r2, #8
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01a      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0204 	bic.w	r2, r2, #4
 8001c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cda:	2201      	movs	r2, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce6:	f043 0202 	orr.w	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d012      	beq.n	8001d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d10:	2204      	movs	r2, #4
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	f043 0204 	orr.w	r2, r3, #4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d28:	2210      	movs	r2, #16
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d043      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03c      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	2210      	movs	r2, #16
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d018      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d108      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d024      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
 8001d7a:	e01f      	b.n	8001dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e016      	b.n	8001dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0208 	bic.w	r2, r2, #8
 8001daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 808f 	beq.w	8001eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 8087 	beq.w	8001eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de2:	2220      	movs	r2, #32
 8001de4:	409a      	lsls	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d136      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0216 	bic.w	r2, r2, #22
 8001e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <HAL_DMA_IRQHandler+0x1da>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0208 	bic.w	r2, r2, #8
 8001e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	223f      	movs	r2, #63	@ 0x3f
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d07e      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
        }
        return;
 8001e62:	e079      	b.n	8001f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01d      	beq.n	8001eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10d      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d031      	beq.n	8001eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
 8001e90:	e02c      	b.n	8001eec <HAL_DMA_IRQHandler+0x2a0>
 8001e92:	bf00      	nop
 8001e94:	20000004 	.word	0x20000004
 8001e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
 8001eac:	e01e      	b.n	8001eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0210 	bic.w	r2, r2, #16
 8001eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d032      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d022      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2205      	movs	r2, #5
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d307      	bcc.n	8001f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f2      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x2cc>
 8001f32:	e000      	b.n	8001f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
 8001f56:	e000      	b.n	8001f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f58:	bf00      	nop
    }
  }
}
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f6e:	b2db      	uxtb	r3, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b40      	cmp	r3, #64	@ 0x40
 8001fa8:	d108      	bne.n	8001fbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fba:	e007      	b.n	8001fcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3b10      	subs	r3, #16
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <DMA_CalcBaseAndBitshift+0x64>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ff2:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <DMA_CalcBaseAndBitshift+0x68>)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d909      	bls.n	800201a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800200e:	f023 0303 	bic.w	r3, r3, #3
 8002012:	1d1a      	adds	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	@ 0x58
 8002018:	e007      	b.n	800202a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	aaaaaaab 	.word	0xaaaaaaab
 8002040:	08006f64 	.word	0x08006f64

08002044 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11f      	bne.n	800209e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d856      	bhi.n	8002112 <DMA_CheckFifoParam+0xce>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <DMA_CheckFifoParam+0x28>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	0800207d 	.word	0x0800207d
 8002070:	0800208f 	.word	0x0800208f
 8002074:	0800207d 	.word	0x0800207d
 8002078:	08002113 	.word	0x08002113
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d046      	beq.n	8002116 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208c:	e043      	b.n	8002116 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002096:	d140      	bne.n	800211a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209c:	e03d      	b.n	800211a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020a6:	d121      	bne.n	80020ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d837      	bhi.n	800211e <DMA_CheckFifoParam+0xda>
 80020ae:	a201      	add	r2, pc, #4	@ (adr r2, 80020b4 <DMA_CheckFifoParam+0x70>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020cb 	.word	0x080020cb
 80020bc:	080020c5 	.word	0x080020c5
 80020c0:	080020dd 	.word	0x080020dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      break;
 80020c8:	e030      	b.n	800212c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d025      	beq.n	8002122 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020da:	e022      	b.n	8002122 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020e4:	d11f      	bne.n	8002126 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ea:	e01c      	b.n	8002126 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d903      	bls.n	80020fa <DMA_CheckFifoParam+0xb6>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d003      	beq.n	8002100 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020f8:	e018      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      break;
 80020fe:	e015      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00e      	beq.n	800212a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      break;
 8002110:	e00b      	b.n	800212a <DMA_CheckFifoParam+0xe6>
      break;
 8002112:	bf00      	nop
 8002114:	e00a      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 8002116:	bf00      	nop
 8002118:	e008      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e006      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
 8002120:	e004      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e002      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;   
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
    }
  } 
  
  return status; 
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e159      	b.n	800240c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8148 	bne.w	8002406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d005      	beq.n	800218e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	2b02      	cmp	r3, #2
 800218c:	d130      	bne.n	80021f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a2 	beq.w	8002406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b57      	ldr	r3, [pc, #348]	@ (8002424 <HAL_GPIO_Init+0x2e8>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a56      	ldr	r2, [pc, #344]	@ (8002424 <HAL_GPIO_Init+0x2e8>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022d2:	4b54      	ldr	r3, [pc, #336]	@ (8002424 <HAL_GPIO_Init+0x2e8>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022de:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_GPIO_Init+0x2ec>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a49      	ldr	r2, [pc, #292]	@ (800242c <HAL_GPIO_Init+0x2f0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d019      	beq.n	800233e <HAL_GPIO_Init+0x202>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a48      	ldr	r2, [pc, #288]	@ (8002430 <HAL_GPIO_Init+0x2f4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0x1fe>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a47      	ldr	r2, [pc, #284]	@ (8002434 <HAL_GPIO_Init+0x2f8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00d      	beq.n	8002336 <HAL_GPIO_Init+0x1fa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a46      	ldr	r2, [pc, #280]	@ (8002438 <HAL_GPIO_Init+0x2fc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <HAL_GPIO_Init+0x1f6>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a45      	ldr	r2, [pc, #276]	@ (800243c <HAL_GPIO_Init+0x300>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_GPIO_Init+0x1f2>
 800232a:	2304      	movs	r3, #4
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x204>
 800232e:	2307      	movs	r3, #7
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x204>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x204>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x204>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x204>
 800233e:	2300      	movs	r3, #0
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002350:	4935      	ldr	r1, [pc, #212]	@ (8002428 <HAL_GPIO_Init+0x2ec>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_GPIO_Init+0x304>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002382:	4a2f      	ldr	r2, [pc, #188]	@ (8002440 <HAL_GPIO_Init+0x304>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_GPIO_Init+0x304>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ac:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <HAL_GPIO_Init+0x304>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b2:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <HAL_GPIO_Init+0x304>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <HAL_GPIO_Init+0x304>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_GPIO_Init+0x304>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002400:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <HAL_GPIO_Init+0x304>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0f      	cmp	r3, #15
 8002410:	f67f aea2 	bls.w	8002158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3724      	adds	r7, #36	@ 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40013800 	.word	0x40013800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400
 8002434:	40020800 	.word	0x40020800
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40021000 	.word	0x40021000
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024b2:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024be:	4a05      	ldr	r2, [pc, #20]	@ (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fccc 	bl	8000e64 <HAL_GPIO_EXTI_Callback>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e12b      	b.n	8002742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe faf6 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	@ 0x24
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800253a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800253c:	f002 fa52 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8002540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a81      	ldr	r2, [pc, #516]	@ (800274c <HAL_I2C_Init+0x274>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d807      	bhi.n	800255c <HAL_I2C_Init+0x84>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a80      	ldr	r2, [pc, #512]	@ (8002750 <HAL_I2C_Init+0x278>)
 8002550:	4293      	cmp	r3, r2
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e006      	b.n	800256a <HAL_I2C_Init+0x92>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a7d      	ldr	r2, [pc, #500]	@ (8002754 <HAL_I2C_Init+0x27c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0e7      	b.n	8002742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a78      	ldr	r2, [pc, #480]	@ (8002758 <HAL_I2C_Init+0x280>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_I2C_Init+0x274>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d802      	bhi.n	80025ac <HAL_I2C_Init+0xd4>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3301      	adds	r3, #1
 80025aa:	e009      	b.n	80025c0 <HAL_I2C_Init+0xe8>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	4a69      	ldr	r2, [pc, #420]	@ (800275c <HAL_I2C_Init+0x284>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	3301      	adds	r3, #1
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	495c      	ldr	r1, [pc, #368]	@ (800274c <HAL_I2C_Init+0x274>)
 80025dc:	428b      	cmp	r3, r1
 80025de:	d819      	bhi.n	8002614 <HAL_I2C_Init+0x13c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e59      	subs	r1, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ee:	1c59      	adds	r1, r3, #1
 80025f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025f4:	400b      	ands	r3, r1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_I2C_Init+0x138>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1e59      	subs	r1, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fbb1 f3f3 	udiv	r3, r1, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	e051      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002610:	2304      	movs	r3, #4
 8002612:	e04f      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <HAL_I2C_Init+0x168>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	440b      	add	r3, r1
 800262a:	fbb0 f3f3 	udiv	r3, r0, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e012      	b.n	8002666 <HAL_I2C_Init+0x18e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Init+0x196>
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_I2C_Init+0x1bc>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e58      	subs	r0, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	440b      	add	r3, r1
 8002684:	fbb0 f3f3 	udiv	r3, r0, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002692:	e00f      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e58      	subs	r0, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	0099      	lsls	r1, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6809      	ldr	r1, [r1, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6911      	ldr	r1, [r2, #16]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	000186a0 	.word	0x000186a0
 8002750:	001e847f 	.word	0x001e847f
 8002754:	003d08ff 	.word	0x003d08ff
 8002758:	431bde83 	.word	0x431bde83
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b80      	cmp	r3, #128	@ 0x80
 8002774:	d103      	bne.n	800277e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d003      	beq.n	80027c2 <HAL_I2C_EV_IRQHandler+0x38>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	f040 80c1 	bne.w	8002944 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_I2C_EV_IRQHandler+0x6e>
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80027e2:	d003      	beq.n	80027ec <HAL_I2C_EV_IRQHandler+0x62>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80027ea:	d101      	bne.n	80027f0 <HAL_I2C_EV_IRQHandler+0x66>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_I2C_EV_IRQHandler+0x68>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	f000 8132 	beq.w	8002a5c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00c      	beq.n	800281c <HAL_I2C_EV_IRQHandler+0x92>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	0a5b      	lsrs	r3, r3, #9
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f001 fc9c 	bl	800414c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fd9f 	bl	8003358 <I2C_Master_SB>
 800281a:	e092      	b.n	8002942 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_I2C_EV_IRQHandler+0xb2>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	0a5b      	lsrs	r3, r3, #9
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fe15 	bl	8003464 <I2C_Master_ADD10>
 800283a:	e082      	b.n	8002942 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_I2C_EV_IRQHandler+0xd2>
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	0a5b      	lsrs	r3, r3, #9
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fe2f 	bl	80034b8 <I2C_Master_ADDR>
 800285a:	e072      	b.n	8002942 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03b      	beq.n	80028e0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002872:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002876:	f000 80f3 	beq.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	09db      	lsrs	r3, r3, #7
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00f      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x11c>
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	0a9b      	lsrs	r3, r3, #10
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x11c>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9f3 	bl	8002c8a <I2C_MasterTransmit_TXE>
 80028a4:	e04d      	b.n	8002942 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80d6 	beq.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	0a5b      	lsrs	r3, r3, #9
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80cf 	beq.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	2b21      	cmp	r3, #33	@ 0x21
 80028c6:	d103      	bne.n	80028d0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fa7a 	bl	8002dc2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ce:	e0c7      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	f040 80c4 	bne.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fae8 	bl	8002eae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028de:	e0bf      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ee:	f000 80b7 	beq.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00f      	beq.n	800291e <HAL_I2C_EV_IRQHandler+0x194>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	0a9b      	lsrs	r3, r3, #10
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_I2C_EV_IRQHandler+0x194>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fb61 	bl	8002fde <I2C_MasterReceive_RXNE>
 800291c:	e011      	b.n	8002942 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 809a 	beq.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0a5b      	lsrs	r3, r3, #9
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8093 	beq.w	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fc17 	bl	800316e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002940:	e08e      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002942:	e08d      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	e007      	b.n	8002966 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d012      	beq.n	8002998 <HAL_I2C_EV_IRQHandler+0x20e>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	0a5b      	lsrs	r3, r3, #9
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00c      	beq.n	8002998 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 ffe0 	bl	8003956 <I2C_Slave_ADDR>
 8002996:	e066      	b.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_I2C_EV_IRQHandler+0x22e>
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f001 f81b 	bl	80039ec <I2C_Slave_STOPF>
 80029b6:	e056      	b.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029b8:	7bbb      	ldrb	r3, [r7, #14]
 80029ba:	2b21      	cmp	r3, #33	@ 0x21
 80029bc:	d002      	beq.n	80029c4 <HAL_I2C_EV_IRQHandler+0x23a>
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	2b29      	cmp	r3, #41	@ 0x29
 80029c2:	d125      	bne.n	8002a10 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	09db      	lsrs	r3, r3, #7
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0x266>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_I2C_EV_IRQHandler+0x266>
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fef6 	bl	80037da <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029ee:	e039      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d033      	beq.n	8002a64 <HAL_I2C_EV_IRQHandler+0x2da>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02d      	beq.n	8002a64 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 ff23 	bl	8003854 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a0e:	e029      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00f      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 ff2e 	bl	8003896 <I2C_SlaveReceive_RXNE>
 8002a3a:	e014      	b.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00e      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	0a5b      	lsrs	r3, r3, #9
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 ff5c 	bl	8003912 <I2C_SlaveReceive_BTF>
 8002a5a:	e004      	b.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002a5c:	bf00      	nop
 8002a5e:	e002      	b.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a60:	bf00      	nop
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a64:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a8e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00e      	beq.n	8002aba <HAL_I2C_ER_IRQHandler+0x4e>
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ab8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	0a5b      	lsrs	r3, r3, #9
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_I2C_ER_IRQHandler+0x78>
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002ae2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	0a9b      	lsrs	r3, r3, #10
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03f      	beq.n	8002b70 <HAL_I2C_ER_IRQHandler+0x104>
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d039      	beq.n	8002b70 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002afc:	7efb      	ldrb	r3, [r7, #27]
 8002afe:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b0e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002b16:	7ebb      	ldrb	r3, [r7, #26]
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d112      	bne.n	8002b42 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b21      	cmp	r3, #33	@ 0x21
 8002b26:	d008      	beq.n	8002b3a <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b29      	cmp	r3, #41	@ 0x29
 8002b2c:	d005      	beq.n	8002b3a <HAL_I2C_ER_IRQHandler+0xce>
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b28      	cmp	r3, #40	@ 0x28
 8002b32:	d106      	bne.n	8002b42 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b21      	cmp	r3, #33	@ 0x21
 8002b38:	d103      	bne.n	8002b42 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f001 f886 	bl	8003c4c <I2C_Slave_AF>
 8002b40:	e016      	b.n	8002b70 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b4a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b54:	7efb      	ldrb	r3, [r7, #27]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d002      	beq.n	8002b60 <HAL_I2C_ER_IRQHandler+0xf4>
 8002b5a:	7efb      	ldrb	r3, [r7, #27]
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d107      	bne.n	8002b70 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	0adb      	lsrs	r3, r3, #11
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <HAL_I2C_ER_IRQHandler+0x12e>
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	f043 0308 	orr.w	r3, r3, #8
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002b98:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f001 f8c1 	bl	8003d34 <I2C_ITError>
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	@ 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	70fb      	strb	r3, [r7, #3]
 8002c16:	4613      	mov	r3, r2
 8002c18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ca0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d150      	bne.n	8002d52 <I2C_MasterTransmit_TXE+0xc8>
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b21      	cmp	r3, #33	@ 0x21
 8002cb4:	d14d      	bne.n	8002d52 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d01d      	beq.n	8002cf8 <I2C_MasterTransmit_TXE+0x6e>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d01a      	beq.n	8002cf8 <I2C_MasterTransmit_TXE+0x6e>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cc8:	d016      	beq.n	8002cf8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cd8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2211      	movs	r2, #17
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff ff62 	bl	8002bba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cf6:	e060      	b.n	8002dba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d06:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d16:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b40      	cmp	r3, #64	@ 0x40
 8002d30:	d107      	bne.n	8002d42 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff7d 	bl	8002c3a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d40:	e03b      	b.n	8002dba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff35 	bl	8002bba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d50:	e033      	b.n	8002dba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b21      	cmp	r3, #33	@ 0x21
 8002d56:	d005      	beq.n	8002d64 <I2C_MasterTransmit_TXE+0xda>
 8002d58:	7bbb      	ldrb	r3, [r7, #14]
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	d12d      	bne.n	8002dba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b22      	cmp	r3, #34	@ 0x22
 8002d62:	d12a      	bne.n	8002dba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d108      	bne.n	8002d80 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d7e:	e01c      	b.n	8002dba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b40      	cmp	r3, #64	@ 0x40
 8002d8a:	d103      	bne.n	8002d94 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f88e 	bl	8002eae <I2C_MemoryTransmit_TXE_BTF>
}
 8002d92:	e012      	b.n	8002dba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002db8:	e7ff      	b.n	8002dba <I2C_MasterTransmit_TXE+0x130>
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b21      	cmp	r3, #33	@ 0x21
 8002dda:	d164      	bne.n	8002ea6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e0a:	e04c      	b.n	8002ea6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d01d      	beq.n	8002e4e <I2C_MasterTransmit_BTF+0x8c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d01a      	beq.n	8002e4e <I2C_MasterTransmit_BTF+0x8c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e1e:	d016      	beq.n	8002e4e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e2e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2211      	movs	r2, #17
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff feb7 	bl	8002bba <HAL_I2C_MasterTxCpltCallback>
}
 8002e4c:	e02b      	b.n	8002ea6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e5c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b40      	cmp	r3, #64	@ 0x40
 8002e86:	d107      	bne.n	8002e98 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff fed2 	bl	8002c3a <HAL_I2C_MemTxCpltCallback>
}
 8002e96:	e006      	b.n	8002ea6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fe8a 	bl	8002bba <HAL_I2C_MasterTxCpltCallback>
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d10b      	bne.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ede:	1c9a      	adds	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002ee4:	e077      	b.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	121b      	asrs	r3, r3, #8
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f00:	e069      	b.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10b      	bne.n	8002f22 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f20:	e059      	b.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d152      	bne.n	8002fd0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b22      	cmp	r3, #34	@ 0x22
 8002f2e:	d10d      	bne.n	8002f4c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f4a:	e044      	b.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b21      	cmp	r3, #33	@ 0x21
 8002f5a:	d112      	bne.n	8002f82 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f80:	e029      	b.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d124      	bne.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b21      	cmp	r3, #33	@ 0x21
 8002f90:	d121      	bne.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fa0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fe36 	bl	8002c3a <HAL_I2C_MemTxCpltCallback>
}
 8002fce:	e002      	b.n	8002fd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fbc5 	bl	8002760 <I2C_Flush_DR>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b22      	cmp	r3, #34	@ 0x22
 8002ff0:	f040 80b9 	bne.w	8003166 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d921      	bls.n	800304c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b03      	cmp	r3, #3
 8003036:	f040 8096 	bne.w	8003166 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003048:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800304a:	e08c      	b.n	8003166 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2b02      	cmp	r3, #2
 8003052:	d07f      	beq.n	8003154 <I2C_MasterReceive_RXNE+0x176>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d002      	beq.n	8003060 <I2C_MasterReceive_RXNE+0x82>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d179      	bne.n	8003154 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f001 f841 	bl	80040e8 <I2C_WaitOnSTOPRequestThroughIT>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d14c      	bne.n	8003106 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800308a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b40      	cmp	r3, #64	@ 0x40
 80030c4:	d10a      	bne.n	80030dc <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fdba 	bl	8002c4e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030da:	e044      	b.n	8003166 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d002      	beq.n	80030f0 <I2C_MasterReceive_RXNE+0x112>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d103      	bne.n	80030f8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80030f6:	e002      	b.n	80030fe <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2212      	movs	r2, #18
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fd65 	bl	8002bce <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003104:	e02f      	b.n	8003166 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003114:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fd88 	bl	8002c62 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003152:	e008      	b.n	8003166 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003162:	605a      	str	r2, [r3, #4]
}
 8003164:	e7ff      	b.n	8003166 <I2C_MasterReceive_RXNE+0x188>
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b04      	cmp	r3, #4
 8003184:	d11b      	bne.n	80031be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003194:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80031bc:	e0c8      	b.n	8003350 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d129      	bne.n	800321c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00a      	beq.n	80031f4 <I2C_MasterReceive_BTF+0x86>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d007      	beq.n	80031f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800321a:	e099      	b.n	8003350 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	f040 8081 	bne.w	800332a <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d002      	beq.n	8003234 <I2C_MasterReceive_BTF+0xc6>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d108      	bne.n	8003246 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e019      	b.n	800327a <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d002      	beq.n	8003252 <I2C_MasterReceive_BTF+0xe4>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d108      	bne.n	8003264 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e00a      	b.n	800327a <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b10      	cmp	r3, #16
 8003268:	d007      	beq.n	800327a <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003278:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80032d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d10a      	bne.n	8003300 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fca8 	bl	8002c4e <HAL_I2C_MemRxCpltCallback>
}
 80032fe:	e027      	b.n	8003350 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b08      	cmp	r3, #8
 800330c:	d002      	beq.n	8003314 <I2C_MasterReceive_BTF+0x1a6>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b20      	cmp	r3, #32
 8003312:	d103      	bne.n	800331c <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
 800331a:	e002      	b.n	8003322 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2212      	movs	r2, #18
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fc53 	bl	8002bce <HAL_I2C_MasterRxCpltCallback>
}
 8003328:	e012      	b.n	8003350 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b40      	cmp	r3, #64	@ 0x40
 800336a:	d117      	bne.n	800339c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003384:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003386:	e067      	b.n	8003458 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]
}
 800339a:	e05d      	b.n	8003458 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a4:	d133      	bne.n	800340e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b21      	cmp	r3, #33	@ 0x21
 80033b0:	d109      	bne.n	80033c6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033c2:	611a      	str	r2, [r3, #16]
 80033c4:	e008      	b.n	80033d8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d004      	beq.n	80033ea <I2C_Master_SB+0x92>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d032      	beq.n	8003458 <I2C_Master_SB+0x100>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02d      	beq.n	8003458 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800340a:	605a      	str	r2, [r3, #4]
}
 800340c:	e024      	b.n	8003458 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	b29b      	uxth	r3, r3
 800341c:	11db      	asrs	r3, r3, #7
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f003 0306 	and.w	r3, r3, #6
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f063 030f 	orn	r3, r3, #15
 800342a:	b2da      	uxtb	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]
}
 8003432:	e011      	b.n	8003458 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10d      	bne.n	8003458 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	b29b      	uxth	r3, r3
 8003442:	11db      	asrs	r3, r3, #7
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f063 030e 	orn	r3, r3, #14
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	b2da      	uxtb	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <I2C_Master_ADD10+0x26>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <I2C_Master_ADD10+0x48>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034aa:	605a      	str	r2, [r3, #4]
  }
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b091      	sub	sp, #68	@ 0x44
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b22      	cmp	r3, #34	@ 0x22
 80034e0:	f040 8169 	bne.w	80037b6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <I2C_Master_ADDR+0x54>
 80034ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80034f0:	2b40      	cmp	r3, #64	@ 0x40
 80034f2:	d10b      	bne.n	800350c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f4:	2300      	movs	r3, #0
 80034f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	e160      	b.n	80037ce <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	2b00      	cmp	r3, #0
 8003512:	d11d      	bne.n	8003550 <I2C_Master_ADDR+0x98>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800351c:	d118      	bne.n	8003550 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003542:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	651a      	str	r2, [r3, #80]	@ 0x50
 800354e:	e13e      	b.n	80037ce <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d113      	bne.n	8003582 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e115      	b.n	80037ae <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 808a 	bne.w	80036a2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003594:	d137      	bne.n	8003606 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035b4:	d113      	bne.n	80035de <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	e0e7      	b.n	80037ae <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e0d3      	b.n	80037ae <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	2b08      	cmp	r3, #8
 800360a:	d02e      	beq.n	800366a <I2C_Master_ADDR+0x1b2>
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	2b20      	cmp	r3, #32
 8003610:	d02b      	beq.n	800366a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003614:	2b12      	cmp	r3, #18
 8003616:	d102      	bne.n	800361e <I2C_Master_ADDR+0x166>
 8003618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361a:	2b01      	cmp	r3, #1
 800361c:	d125      	bne.n	800366a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003620:	2b04      	cmp	r3, #4
 8003622:	d00e      	beq.n	8003642 <I2C_Master_ADDR+0x18a>
 8003624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003626:	2b02      	cmp	r3, #2
 8003628:	d00b      	beq.n	8003642 <I2C_Master_ADDR+0x18a>
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	2b10      	cmp	r3, #16
 800362e:	d008      	beq.n	8003642 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e007      	b.n	8003652 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003650:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	e0a1      	b.n	80037ae <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003678:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e085      	b.n	80037ae <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d14d      	bne.n	8003748 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d016      	beq.n	80036e0 <I2C_Master_ADDR+0x228>
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d013      	beq.n	80036e0 <I2C_Master_ADDR+0x228>
 80036b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d010      	beq.n	80036e0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036cc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e007      	b.n	80036f0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ee:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fe:	d117      	bne.n	8003730 <I2C_Master_ADDR+0x278>
 8003700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003702:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003706:	d00b      	beq.n	8003720 <I2C_Master_ADDR+0x268>
 8003708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370a:	2b01      	cmp	r3, #1
 800370c:	d008      	beq.n	8003720 <I2C_Master_ADDR+0x268>
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b08      	cmp	r3, #8
 8003712:	d005      	beq.n	8003720 <I2C_Master_ADDR+0x268>
 8003714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003716:	2b10      	cmp	r3, #16
 8003718:	d002      	beq.n	8003720 <I2C_Master_ADDR+0x268>
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	2b20      	cmp	r3, #32
 800371e:	d107      	bne.n	8003730 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800372e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	e032      	b.n	80037ae <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003756:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003766:	d117      	bne.n	8003798 <I2C_Master_ADDR+0x2e0>
 8003768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800376e:	d00b      	beq.n	8003788 <I2C_Master_ADDR+0x2d0>
 8003770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003772:	2b01      	cmp	r3, #1
 8003774:	d008      	beq.n	8003788 <I2C_Master_ADDR+0x2d0>
 8003776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003778:	2b08      	cmp	r3, #8
 800377a:	d005      	beq.n	8003788 <I2C_Master_ADDR+0x2d0>
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	2b10      	cmp	r3, #16
 8003780:	d002      	beq.n	8003788 <I2C_Master_ADDR+0x2d0>
 8003782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003784:	2b20      	cmp	r3, #32
 8003786:	d107      	bne.n	8003798 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003796:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80037b4:	e00b      	b.n	80037ce <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	e7ff      	b.n	80037ce <I2C_Master_ADDR+0x316>
 80037ce:	bf00      	nop
 80037d0:	3744      	adds	r7, #68	@ 0x44
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02b      	beq.n	800384c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d114      	bne.n	800384c <I2C_SlaveTransmit_TXE+0x72>
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b29      	cmp	r3, #41	@ 0x29
 8003826:	d111      	bne.n	800384c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003836:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2221      	movs	r2, #33	@ 0x21
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2228      	movs	r2, #40	@ 0x28
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff f9cb 	bl	8002be2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02c      	beq.n	800390a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d114      	bne.n	800390a <I2C_SlaveReceive_RXNE+0x74>
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80038e4:	d111      	bne.n	800390a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2222      	movs	r2, #34	@ 0x22
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2228      	movs	r2, #40	@ 0x28
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff f976 	bl	8002bf6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d012      	beq.n	800394a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003970:	2b28      	cmp	r3, #40	@ 0x28
 8003972:	d127      	bne.n	80039c4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003982:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	09db      	lsrs	r3, r3, #7
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	81bb      	strh	r3, [r7, #12]
 80039a6:	e002      	b.n	80039ae <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039b6:	89ba      	ldrh	r2, [r7, #12]
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff f924 	bl	8002c0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039c2:	e00e      	b.n	80039e2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a48:	d172      	bne.n	8003b30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b22      	cmp	r3, #34	@ 0x22
 8003a4e:	d002      	beq.n	8003a56 <I2C_Slave_STOPF+0x6a>
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a54:	d135      	bne.n	8003ac2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f043 0204 	orr.w	r2, r3, #4
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fa66 	bl	8001f60 <HAL_DMA_GetState>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d049      	beq.n	8003b2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	4a69      	ldr	r2, [pc, #420]	@ (8003c44 <I2C_Slave_STOPF+0x258>)
 8003aa0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe f8ae 	bl	8001c08 <HAL_DMA_Abort_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d03d      	beq.n	8003b2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003abc:	4610      	mov	r0, r2
 8003abe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac0:	e035      	b.n	8003b2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003af4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fa30 	bl	8001f60 <HAL_DMA_GetState>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d014      	beq.n	8003b30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003c44 <I2C_Slave_STOPF+0x258>)
 8003b0c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe f878 	bl	8001c08 <HAL_DMA_Abort_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4798      	blx	r3
 8003b2c:	e000      	b.n	8003b30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03e      	beq.n	8003bb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d112      	bne.n	8003b6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d112      	bne.n	8003ba2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8b7 	bl	8003d34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003bc6:	e039      	b.n	8003c3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bcc:	d109      	bne.n	8003be2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2228      	movs	r2, #40	@ 0x28
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff f80a 	bl	8002bf6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b28      	cmp	r3, #40	@ 0x28
 8003bec:	d111      	bne.n	8003c12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a15      	ldr	r2, [pc, #84]	@ (8003c48 <I2C_Slave_STOPF+0x25c>)
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff f80b 	bl	8002c26 <HAL_I2C_ListenCpltCallback>
}
 8003c10:	e014      	b.n	8003c3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	2b22      	cmp	r3, #34	@ 0x22
 8003c18:	d002      	beq.n	8003c20 <I2C_Slave_STOPF+0x234>
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b22      	cmp	r3, #34	@ 0x22
 8003c1e:	d10d      	bne.n	8003c3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fe ffdd 	bl	8002bf6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08003f99 	.word	0x08003f99
 8003c48:	ffff0000 	.word	0xffff0000

08003c4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d002      	beq.n	8003c6e <I2C_Slave_AF+0x22>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d129      	bne.n	8003cc2 <I2C_Slave_AF+0x76>
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b28      	cmp	r3, #40	@ 0x28
 8003c72:	d126      	bne.n	8003cc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a2e      	ldr	r2, [pc, #184]	@ (8003d30 <I2C_Slave_AF+0xe4>)
 8003c78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe ffb3 	bl	8002c26 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003cc0:	e031      	b.n	8003d26 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b21      	cmp	r3, #33	@ 0x21
 8003cc6:	d129      	bne.n	8003d1c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a19      	ldr	r2, [pc, #100]	@ (8003d30 <I2C_Slave_AF+0xe4>)
 8003ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2221      	movs	r2, #33	@ 0x21
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cf2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe fd26 	bl	8002760 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fe ff64 	bl	8002be2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d1a:	e004      	b.n	8003d26 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d24:	615a      	str	r2, [r3, #20]
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	ffff0000 	.word	0xffff0000

08003d34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d4c:	7bbb      	ldrb	r3, [r7, #14]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d002      	beq.n	8003d58 <I2C_ITError+0x24>
 8003d52:	7bbb      	ldrb	r3, [r7, #14]
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d10a      	bne.n	8003d6e <I2C_ITError+0x3a>
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b22      	cmp	r3, #34	@ 0x22
 8003d5c:	d107      	bne.n	8003d6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d74:	2b28      	cmp	r3, #40	@ 0x28
 8003d76:	d107      	bne.n	8003d88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2228      	movs	r2, #40	@ 0x28
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d86:	e015      	b.n	8003db4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d96:	d00a      	beq.n	8003dae <I2C_ITError+0x7a>
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b60      	cmp	r3, #96	@ 0x60
 8003d9c:	d007      	beq.n	8003dae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc2:	d162      	bne.n	8003e8a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d020      	beq.n	8003e24 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	4a6a      	ldr	r2, [pc, #424]	@ (8003f90 <I2C_ITError+0x25c>)
 8003de8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd ff0a 	bl	8001c08 <HAL_DMA_Abort_IT>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8089 	beq.w	8003f0e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4798      	blx	r3
 8003e22:	e074      	b.n	8003f0e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	4a59      	ldr	r2, [pc, #356]	@ (8003f90 <I2C_ITError+0x25c>)
 8003e2a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd fee9 	bl	8001c08 <HAL_DMA_Abort_IT>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d068      	beq.n	8003f0e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b40      	cmp	r3, #64	@ 0x40
 8003e48:	d10b      	bne.n	8003e62 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e84:	4610      	mov	r0, r2
 8003e86:	4798      	blx	r3
 8003e88:	e041      	b.n	8003f0e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b60      	cmp	r3, #96	@ 0x60
 8003e94:	d125      	bne.n	8003ee2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eae:	2b40      	cmp	r3, #64	@ 0x40
 8003eb0:	d10b      	bne.n	8003eca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe fecb 	bl	8002c76 <HAL_I2C_AbortCpltCallback>
 8003ee0:	e015      	b.n	8003f0e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d10b      	bne.n	8003f08 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fe feaa 	bl	8002c62 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10e      	bne.n	8003f3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f52:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d113      	bne.n	8003f88 <I2C_ITError+0x254>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b28      	cmp	r3, #40	@ 0x28
 8003f64:	d110      	bne.n	8003f88 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a0a      	ldr	r2, [pc, #40]	@ (8003f94 <I2C_ITError+0x260>)
 8003f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fe fe4f 	bl	8002c26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	ffff0000 	.word	0xffff0000

08003f98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80040e0 <I2C_DMAAbort+0x148>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	08db      	lsrs	r3, r3, #3
 8003fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80040e4 <I2C_DMAAbort+0x14c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0a1a      	lsrs	r2, r3, #8
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00da      	lsls	r2, r3, #3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f043 0220 	orr.w	r2, r3, #32
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003fde:	e00a      	b.n	8003ff6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff4:	d0ea      	beq.n	8003fcc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004002:	2200      	movs	r2, #0
 8004004:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	2200      	movs	r2, #0
 8004014:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004024:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004038:	2200      	movs	r2, #0
 800403a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	2200      	movs	r2, #0
 800404a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b60      	cmp	r3, #96	@ 0x60
 8004066:	d10e      	bne.n	8004086 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7fe fdf9 	bl	8002c76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004084:	e027      	b.n	80040d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800408c:	2b28      	cmp	r3, #40	@ 0x28
 800408e:	d117      	bne.n	80040c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2228      	movs	r2, #40	@ 0x28
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040be:	e007      	b.n	80040d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040d0:	6978      	ldr	r0, [r7, #20]
 80040d2:	f7fe fdc6 	bl	8002c62 <HAL_I2C_ErrorCallback>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000004 	.word	0x20000004
 80040e4:	14f8b589 	.word	0x14f8b589

080040e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040f4:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	4a13      	ldr	r2, [pc, #76]	@ (8004148 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	0a1a      	lsrs	r2, r3, #8
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b01      	subs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e008      	b.n	8004138 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004134:	d0e9      	beq.n	800410a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	20000004 	.word	0x20000004
 8004148:	14f8b589 	.word	0x14f8b589

0800414c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800415c:	d103      	bne.n	8004166 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004164:	e007      	b.n	8004176 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800416e:	d102      	bne.n	8004176 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2208      	movs	r2, #8
 8004174:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e267      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041a2:	4b88      	ldr	r3, [pc, #544]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b85      	ldr	r3, [pc, #532]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b82      	ldr	r3, [pc, #520]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e242      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x74>
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b70      	ldr	r3, [pc, #448]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b6d      	ldr	r3, [pc, #436]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6c      	ldr	r2, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 800421c:	4b69      	ldr	r3, [pc, #420]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd fa50 	bl	80016e0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004244:	f7fd fa4c 	bl	80016e0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	@ 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e207      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b5b      	ldr	r3, [pc, #364]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xc0>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fd fa3c 	bl	80016e0 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fa38 	bl	80016e0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	@ 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1f3      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b51      	ldr	r3, [pc, #324]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d063      	beq.n	8004362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b44      	ldr	r3, [pc, #272]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1c7      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4937      	ldr	r1, [pc, #220]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b34      	ldr	r3, [pc, #208]	@ (80043c8 <HAL_RCC_OscConfig+0x244>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd f9f1 	bl	80016e0 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004302:	f7fd f9ed 	bl	80016e0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1a8      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4925      	ldr	r1, [pc, #148]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <HAL_RCC_OscConfig+0x244>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd f9d0 	bl	80016e0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fd f9cc 	bl	80016e0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e187      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <HAL_RCC_OscConfig+0x248>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fd f9b0 	bl	80016e0 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004384:	f7fd f9ac 	bl	80016e0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e167      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x200>
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_OscConfig+0x248>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fd f999 	bl	80016e0 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00e      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fd f995 	bl	80016e0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d907      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e150      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8097 	beq.w	8004518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b81      	ldr	r3, [pc, #516]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b7d      	ldr	r3, [pc, #500]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	4a7c      	ldr	r2, [pc, #496]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	@ 0x40
 800440a:	4b7a      	ldr	r3, [pc, #488]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b77      	ldr	r3, [pc, #476]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b74      	ldr	r3, [pc, #464]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fd f955 	bl	80016e0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fd f951 	bl	80016e0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b6a      	ldr	r3, [pc, #424]	@ (80045f8 <HAL_RCC_OscConfig+0x474>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x2ea>
 8004460:	4b64      	ldr	r3, [pc, #400]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004464:	4a63      	ldr	r2, [pc, #396]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x30c>
 8004476:	4b5f      	ldr	r3, [pc, #380]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	4a5e      	ldr	r2, [pc, #376]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	@ 0x70
 8004482:	4b5c      	ldr	r3, [pc, #368]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a5b      	ldr	r2, [pc, #364]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 8004490:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	@ 0x70
 800449c:	4b55      	ldr	r3, [pc, #340]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	4a54      	ldr	r2, [pc, #336]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f023 0304 	bic.w	r3, r3, #4
 80044a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fd f916 	bl	80016e0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fd f912 	bl	80016e0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0cb      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b49      	ldr	r3, [pc, #292]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCC_OscConfig+0x334>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fd f900 	bl	80016e0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fd f8fc 	bl	80016e0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0b5      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	4b3e      	ldr	r3, [pc, #248]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ee      	bne.n	80044e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	4a38      	ldr	r2, [pc, #224]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a1 	beq.w	8004664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004522:	4b34      	ldr	r3, [pc, #208]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d05c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d141      	bne.n	80045ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fd f8d0 	bl	80016e0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fd f8cc 	bl	80016e0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e087      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	491b      	ldr	r1, [pc, #108]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b1b      	ldr	r3, [pc, #108]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fd f8a5 	bl	80016e0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459a:	f7fd f8a1 	bl	80016e0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e05c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x416>
 80045b8:	e054      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd f88e 	bl	80016e0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fd f88a 	bl	80016e0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e045      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
 80045e6:	e03d      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e038      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004600:	4b1b      	ldr	r3, [pc, #108]	@ (8004670 <HAL_RCC_OscConfig+0x4ec>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d028      	beq.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d121      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	3b01      	subs	r3, #1
 800464a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cc      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b68      	ldr	r3, [pc, #416]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90c      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b65      	ldr	r3, [pc, #404]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a58      	ldr	r2, [pc, #352]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a52      	ldr	r2, [pc, #328]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472e:	2b03      	cmp	r3, #3
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b3f      	ldr	r3, [pc, #252]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e067      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b37      	ldr	r3, [pc, #220]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4934      	ldr	r1, [pc, #208]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fc ffbc 	bl	80016e0 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fc ffb8 	bl	80016e0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b25      	ldr	r3, [pc, #148]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20c      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b22      	ldr	r3, [pc, #136]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f821 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	@ (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	@ (8004838 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc ff1c 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	08006f4c 	.word	0x08006f4c
 8004838:	20000004 	.word	0x20000004
 800483c:	20000008 	.word	0x20000008

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b090      	sub	sp, #64	@ 0x40
 8004846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004858:	4b59      	ldr	r3, [pc, #356]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d00d      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x40>
 8004864:	2b08      	cmp	r3, #8
 8004866:	f200 80a1 	bhi.w	80049ac <HAL_RCC_GetSysClockFreq+0x16c>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x34>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x3a>
 8004872:	e09b      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b53      	ldr	r3, [pc, #332]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004878:	e09b      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800487a:	4b53      	ldr	r3, [pc, #332]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800487c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800487e:	e098      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004880:	4b4f      	ldr	r3, [pc, #316]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004888:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488a:	4b4d      	ldr	r3, [pc, #308]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d028      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004896:	4b4a      	ldr	r3, [pc, #296]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	2200      	movs	r2, #0
 800489e:	623b      	str	r3, [r7, #32]
 80048a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048a8:	2100      	movs	r1, #0
 80048aa:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80048ac:	fb03 f201 	mul.w	r2, r3, r1
 80048b0:	2300      	movs	r3, #0
 80048b2:	fb00 f303 	mul.w	r3, r0, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	4a43      	ldr	r2, [pc, #268]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80048ba:	fba0 1202 	umull	r1, r2, r0, r2
 80048be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c0:	460a      	mov	r2, r1
 80048c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80048c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c6:	4413      	add	r3, r2
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048cc:	2200      	movs	r2, #0
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	61fa      	str	r2, [r7, #28]
 80048d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80048da:	f7fb fc7b 	bl	80001d4 <__aeabi_uldivmod>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4613      	mov	r3, r2
 80048e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048e6:	e053      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4b35      	ldr	r3, [pc, #212]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	2200      	movs	r2, #0
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	617a      	str	r2, [r7, #20]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048fa:	f04f 0b00 	mov.w	fp, #0
 80048fe:	4652      	mov	r2, sl
 8004900:	465b      	mov	r3, fp
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	0159      	lsls	r1, r3, #5
 800490c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004910:	0150      	lsls	r0, r2, #5
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	ebb2 080a 	subs.w	r8, r2, sl
 800491a:	eb63 090b 	sbc.w	r9, r3, fp
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800492a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800492e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004932:	ebb2 0408 	subs.w	r4, r2, r8
 8004936:	eb63 0509 	sbc.w	r5, r3, r9
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	00eb      	lsls	r3, r5, #3
 8004944:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004948:	00e2      	lsls	r2, r4, #3
 800494a:	4614      	mov	r4, r2
 800494c:	461d      	mov	r5, r3
 800494e:	eb14 030a 	adds.w	r3, r4, sl
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	eb45 030b 	adc.w	r3, r5, fp
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004966:	4629      	mov	r1, r5
 8004968:	028b      	lsls	r3, r1, #10
 800496a:	4621      	mov	r1, r4
 800496c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004970:	4621      	mov	r1, r4
 8004972:	028a      	lsls	r2, r1, #10
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497a:	2200      	movs	r2, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	60fa      	str	r2, [r7, #12]
 8004980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004984:	f7fb fc26 	bl	80001d4 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4613      	mov	r3, r2
 800498e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	3301      	adds	r3, #1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80049a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80049ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3740      	adds	r7, #64	@ 0x40
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	01528040 	.word	0x01528040

080049cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000004 	.word	0x20000004

080049e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e8:	f7ff fff0 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	0a9b      	lsrs	r3, r3, #10
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4903      	ldr	r1, [pc, #12]	@ (8004a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40023800 	.word	0x40023800
 8004a08:	08006f5c 	.word	0x08006f5c

08004a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a10:	f7ff ffdc 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0b5b      	lsrs	r3, r3, #13
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4903      	ldr	r1, [pc, #12]	@ (8004a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	08006f5c 	.word	0x08006f5c

08004a34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d035      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a5c:	4b67      	ldr	r3, [pc, #412]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a62:	f7fc fe3d 	bl	80016e0 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a6a:	f7fc fe39 	bl	80016e0 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0ba      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a7c:	4b60      	ldr	r3, [pc, #384]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	019a      	lsls	r2, r3, #6
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	071b      	lsls	r3, r3, #28
 8004a94:	495a      	ldr	r1, [pc, #360]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a9c:	4b57      	ldr	r3, [pc, #348]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa2:	f7fc fe1d 	bl	80016e0 <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aaa:	f7fc fe19 	bl	80016e0 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e09a      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abc:	4b50      	ldr	r3, [pc, #320]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8083 	beq.w	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	4b49      	ldr	r3, [pc, #292]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	4a48      	ldr	r2, [pc, #288]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae6:	4b46      	ldr	r3, [pc, #280]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004af2:	4b44      	ldr	r3, [pc, #272]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a43      	ldr	r2, [pc, #268]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004afc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004afe:	f7fc fdef 	bl	80016e0 <HAL_GetTick>
 8004b02:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b06:	f7fc fdeb 	bl	80016e0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e06c      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004b18:	4b3a      	ldr	r3, [pc, #232]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b24:	4b36      	ldr	r3, [pc, #216]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d02f      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d028      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b42:	4b2f      	ldr	r3, [pc, #188]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b52:	4b2d      	ldr	r3, [pc, #180]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b58:	4a29      	ldr	r2, [pc, #164]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b5e:	4b28      	ldr	r3, [pc, #160]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d114      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fc fdb9 	bl	80016e0 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fc fdb5 	bl	80016e0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e034      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	4b1d      	ldr	r3, [pc, #116]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba0:	d10d      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ba2:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb6:	4912      	ldr	r1, [pc, #72]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	608b      	str	r3, [r1, #8]
 8004bbc:	e005      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bbe:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004bc8:	6093      	str	r3, [r2, #8]
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bcc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd6:	490a      	ldr	r1, [pc, #40]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	7c1a      	ldrb	r2, [r3, #16]
 8004bec:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bee:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	42470068 	.word	0x42470068
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42470e40 	.word	0x42470e40
 8004c0c:	424711e0 	.word	0x424711e0

08004c10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e073      	b.n	8004d0e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7f5b      	ldrb	r3, [r3, #29]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc f972 	bl	8000f20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d055      	beq.n	8004cfc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	22ca      	movs	r2, #202	@ 0xca
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2253      	movs	r2, #83	@ 0x53
 8004c5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f87f 	bl	8004d64 <RTC_EnterInitMode>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d12c      	bne.n	8004cca <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c82:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68d2      	ldr	r2, [r2, #12]
 8004caa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6919      	ldr	r1, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	041a      	lsls	r2, r3, #16
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f886 	bl	8004dd2 <RTC_ExitInitMode>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d110      	bne.n	8004cf2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cde:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	@ 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24
 8004cfa:	e001      	b.n	8004d00 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a0d      	ldr	r2, [pc, #52]	@ (8004d60 <HAL_RTC_WaitForSynchro+0x48>)
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d2c:	f7fc fcd8 	bl	80016e0 <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d32:	e009      	b.n	8004d48 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d34:	f7fc fcd4 	bl	80016e0 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d42:	d901      	bls.n	8004d48 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e007      	b.n	8004d58 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ee      	beq.n	8004d34 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	00013f5f 	.word	0x00013f5f

08004d64 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d122      	bne.n	8004dc8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d92:	f7fc fca5 	bl	80016e0 <HAL_GetTick>
 8004d96:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d98:	e00c      	b.n	8004db4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d9a:	f7fc fca1 	bl	80016e0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004da8:	d904      	bls.n	8004db4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2204      	movs	r2, #4
 8004dae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <RTC_EnterInitMode+0x64>
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d1e8      	bne.n	8004d9a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff8b 	bl	8004d18 <HAL_RTC_WaitForSynchro>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07b      	b.n	8004f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d108      	bne.n	8004e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e3e:	d009      	beq.n	8004e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	61da      	str	r2, [r3, #28]
 8004e46:	e005      	b.n	8004e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc f8b8 	bl	8000fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed8:	ea42 0103 	orr.w	r1, r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	f003 0104 	and.w	r1, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	f003 0210 	and.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e097      	b.n	800507e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Transmit_DMA+0x2a>
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e08f      	b.n	800507e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_SPI_Transmit_DMA+0x3c>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e088      	b.n	800507e <HAL_SPI_Transmit_DMA+0x14e>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2203      	movs	r2, #3
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	88fa      	ldrh	r2, [r7, #6]
 8004f92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fba:	d10f      	bne.n	8004fdc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe0:	4a29      	ldr	r2, [pc, #164]	@ (8005088 <HAL_SPI_Transmit_DMA+0x158>)
 8004fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe8:	4a28      	ldr	r2, [pc, #160]	@ (800508c <HAL_SPI_Transmit_DMA+0x15c>)
 8004fea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff0:	4a27      	ldr	r2, [pc, #156]	@ (8005090 <HAL_SPI_Transmit_DMA+0x160>)
 8004ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	4619      	mov	r1, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005012:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005014:	f7fc fd30 	bl	8001a78 <HAL_DMA_Start_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005022:	f043 0210 	orr.w	r2, r3, #16
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e023      	b.n	800507e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	d007      	beq.n	8005054 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0220 	orr.w	r2, r2, #32
 800506a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0202 	orr.w	r2, r2, #2
 800507a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	08005365 	.word	0x08005365
 800508c:	080052bd 	.word	0x080052bd
 8005090:	08005381 	.word	0x08005381

08005094 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10f      	bne.n	80050d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
    return;
 80050d6:	e0d7      	b.n	8005288 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_SPI_IRQHandler+0x66>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	09db      	lsrs	r3, r3, #7
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
    return;
 80050f8:	e0c6      	b.n	8005288 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_SPI_IRQHandler+0x8c>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	099b      	lsrs	r3, r3, #6
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80b4 	beq.w	8005288 <HAL_SPI_IRQHandler+0x1f4>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80ad 	beq.w	8005288 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	099b      	lsrs	r3, r3, #6
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d023      	beq.n	8005182 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b03      	cmp	r3, #3
 8005144:	d011      	beq.n	800516a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514a:	f043 0204 	orr.w	r2, r3, #4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	e00b      	b.n	8005182 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]
        return;
 8005180:	e082      	b.n	8005288 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d014      	beq.n	80051b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00c      	beq.n	80051de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	f043 0208 	orr.w	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051d0:	2300      	movs	r3, #0
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d04f      	beq.n	8005286 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <HAL_SPI_IRQHandler+0x17e>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d034      	beq.n	800527c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0203 	bic.w	r2, r2, #3
 8005220:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d011      	beq.n	800524e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <HAL_SPI_IRQHandler+0x1fc>)
 8005230:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fce6 	bl	8001c08 <HAL_DMA_Abort_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525a:	4a0d      	ldr	r2, [pc, #52]	@ (8005290 <HAL_SPI_IRQHandler+0x1fc>)
 800525c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005262:	4618      	mov	r0, r3
 8005264:	f7fc fcd0 	bl	8001c08 <HAL_DMA_Abort_IT>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800527a:	e003      	b.n	8005284 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f813 	bl	80052a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005282:	e000      	b.n	8005286 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005284:	bf00      	nop
    return;
 8005286:	bf00      	nop
  }
}
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	080053c1 	.word	0x080053c1

08005294 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ca:	f7fc fa09 	bl	80016e0 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052de:	d03b      	beq.n	8005358 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0220 	bic.w	r2, r2, #32
 80052ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0202 	bic.w	r2, r2, #2
 80052fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	2164      	movs	r1, #100	@ 0x64
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f000 f8f7 	bl	80054f8 <SPI_EndRxTxTransaction>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005350:	6978      	ldr	r0, [r7, #20]
 8005352:	f7ff ffa9 	bl	80052a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005356:	e002      	b.n	800535e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005358:	6978      	ldr	r0, [r7, #20]
 800535a:	f7fb fd65 	bl	8000e28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ff8e 	bl	8005294 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0203 	bic.w	r2, r2, #3
 800539c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	f043 0210 	orr.w	r2, r3, #16
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff78 	bl	80052a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ff64 	bl	80052a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053f8:	f7fc f972 	bl	80016e0 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	4413      	add	r3, r2
 8005406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005408:	f7fc f96a 	bl	80016e0 <HAL_GetTick>
 800540c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800540e:	4b39      	ldr	r3, [pc, #228]	@ (80054f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	015b      	lsls	r3, r3, #5
 8005414:	0d1b      	lsrs	r3, r3, #20
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541e:	e054      	b.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d050      	beq.n	80054ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005428:	f7fc f95a 	bl	80016e0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	429a      	cmp	r2, r3
 8005436:	d902      	bls.n	800543e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d13d      	bne.n	80054ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800544c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005456:	d111      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005460:	d004      	beq.n	800546c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546a:	d107      	bne.n	800547c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800547a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005484:	d10f      	bne.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e017      	b.n	80054ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d19b      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000004 	.word	0x20000004

080054f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2201      	movs	r2, #1
 800550c:	2102      	movs	r1, #2
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff6a 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e032      	b.n	8005590 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800552a:	4b1b      	ldr	r3, [pc, #108]	@ (8005598 <SPI_EndRxTxTransaction+0xa0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <SPI_EndRxTxTransaction+0xa4>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	0d5b      	lsrs	r3, r3, #21
 8005536:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005548:	d112      	bne.n	8005570 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2200      	movs	r2, #0
 8005552:	2180      	movs	r1, #128	@ 0x80
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff ff47 	bl	80053e8 <SPI_WaitFlagStateUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d016      	beq.n	800558e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e00f      	b.n	8005590 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	3b01      	subs	r3, #1
 800557a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b80      	cmp	r3, #128	@ 0x80
 8005588:	d0f2      	beq.n	8005570 <SPI_EndRxTxTransaction+0x78>
 800558a:	e000      	b.n	800558e <SPI_EndRxTxTransaction+0x96>
        break;
 800558c:	bf00      	nop
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000004 	.word	0x20000004
 800559c:	165e9f81 	.word	0x165e9f81

080055a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e041      	b.n	8005636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb ff1e 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f000 faba 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d001      	beq.n	8005658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e044      	b.n	80056e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1e      	ldr	r2, [pc, #120]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x6c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d013      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x6c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1a      	ldr	r2, [pc, #104]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x6c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a19      	ldr	r2, [pc, #100]	@ (80056f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x6c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a17      	ldr	r2, [pc, #92]	@ (80056fc <HAL_TIM_Base_Start_IT+0xbc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x6c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a16      	ldr	r2, [pc, #88]	@ (8005700 <HAL_TIM_Base_Start_IT+0xc0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d111      	bne.n	80056d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d010      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	e007      	b.n	80056e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40014000 	.word	0x40014000

08005704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e041      	b.n	800579a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fe44 	bl	80013b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fa08 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d020      	beq.n	8005806 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01b      	beq.n	8005806 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f06f 0202 	mvn.w	r2, #2
 80057d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f995 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 80057f2:	e005      	b.n	8005800 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f987 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f998 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01b      	beq.n	8005852 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f06f 0204 	mvn.w	r2, #4
 8005822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f96f 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 800583e:	e005      	b.n	800584c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f961 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f972 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01b      	beq.n	800589e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0208 	mvn.w	r2, #8
 800586e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2204      	movs	r2, #4
 8005874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f949 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 800588a:	e005      	b.n	8005898 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f93b 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f94c 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01b      	beq.n	80058ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f06f 0210 	mvn.w	r2, #16
 80058ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2208      	movs	r2, #8
 80058c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f923 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 80058d6:	e005      	b.n	80058e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f915 	bl	8005b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f926 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00c      	beq.n	800590e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f06f 0201 	mvn.w	r2, #1
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fb fa3f 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fba3 	bl	8006078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8f7 	bl	8005b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f06f 0220 	mvn.w	r2, #32
 8005972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb75 	bl	8006064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800599e:	2302      	movs	r3, #2
 80059a0:	e0ae      	b.n	8005b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	f200 809f 	bhi.w	8005af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059b2:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005af1 	.word	0x08005af1
 80059c0:	08005af1 	.word	0x08005af1
 80059c4:	08005af1 	.word	0x08005af1
 80059c8:	08005a2d 	.word	0x08005a2d
 80059cc:	08005af1 	.word	0x08005af1
 80059d0:	08005af1 	.word	0x08005af1
 80059d4:	08005af1 	.word	0x08005af1
 80059d8:	08005a6f 	.word	0x08005a6f
 80059dc:	08005af1 	.word	0x08005af1
 80059e0:	08005af1 	.word	0x08005af1
 80059e4:	08005af1 	.word	0x08005af1
 80059e8:	08005aaf 	.word	0x08005aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f93c 	bl	8005c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0208 	orr.w	r2, r2, #8
 8005a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0204 	bic.w	r2, r2, #4
 8005a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	619a      	str	r2, [r3, #24]
      break;
 8005a2a:	e064      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f982 	bl	8005d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
      break;
 8005a6c:	e043      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 f9cd 	bl	8005e14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0204 	bic.w	r2, r2, #4
 8005a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
      break;
 8005aac:	e023      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fa17 	bl	8005ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	021a      	lsls	r2, r3, #8
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	61da      	str	r2, [r3, #28]
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	75fb      	strb	r3, [r7, #23]
      break;
 8005af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3a      	ldr	r2, [pc, #232]	@ (8005c54 <TIM_Base_SetConfig+0xfc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00f      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b76:	d00b      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a37      	ldr	r2, [pc, #220]	@ (8005c58 <TIM_Base_SetConfig+0x100>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a36      	ldr	r2, [pc, #216]	@ (8005c5c <TIM_Base_SetConfig+0x104>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a35      	ldr	r2, [pc, #212]	@ (8005c60 <TIM_Base_SetConfig+0x108>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c54 <TIM_Base_SetConfig+0xfc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01b      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d017      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a28      	ldr	r2, [pc, #160]	@ (8005c58 <TIM_Base_SetConfig+0x100>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a27      	ldr	r2, [pc, #156]	@ (8005c5c <TIM_Base_SetConfig+0x104>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a26      	ldr	r2, [pc, #152]	@ (8005c60 <TIM_Base_SetConfig+0x108>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a25      	ldr	r2, [pc, #148]	@ (8005c64 <TIM_Base_SetConfig+0x10c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a24      	ldr	r2, [pc, #144]	@ (8005c68 <TIM_Base_SetConfig+0x110>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a23      	ldr	r2, [pc, #140]	@ (8005c6c <TIM_Base_SetConfig+0x114>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8005c54 <TIM_Base_SetConfig+0xfc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d103      	bne.n	8005c28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d105      	bne.n	8005c46 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f023 0201 	bic.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]
  }
}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800

08005c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f023 0201 	bic.w	r2, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0303 	bic.w	r3, r3, #3
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 0302 	bic.w	r3, r3, #2
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <TIM_OC1_SetConfig+0xc8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10c      	bne.n	8005ce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0308 	bic.w	r3, r3, #8
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0304 	bic.w	r3, r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	@ (8005d38 <TIM_OC1_SetConfig+0xc8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40010000 	.word	0x40010000

08005d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	f023 0210 	bic.w	r2, r3, #16
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0320 	bic.w	r3, r3, #32
 8005d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	@ (8005e10 <TIM_OC2_SetConfig+0xd4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10d      	bne.n	8005db8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a15      	ldr	r2, [pc, #84]	@ (8005e10 <TIM_OC2_SetConfig+0xd4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d113      	bne.n	8005de8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000

08005e14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee4 <TIM_OC3_SetConfig+0xd0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10d      	bne.n	8005e8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a14      	ldr	r2, [pc, #80]	@ (8005ee4 <TIM_OC3_SetConfig+0xd0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d113      	bne.n	8005ebe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40010000 	.word	0x40010000

08005ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	031b      	lsls	r3, r3, #12
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a10      	ldr	r2, [pc, #64]	@ (8005f84 <TIM_OC4_SetConfig+0x9c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d109      	bne.n	8005f5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	019b      	lsls	r3, r3, #6
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000

08005f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e050      	b.n	8006042 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fec:	d013      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a15      	ldr	r2, [pc, #84]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a13      	ldr	r2, [pc, #76]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d10c      	bne.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800601c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4313      	orrs	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40010000 	.word	0x40010000
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40014000 	.word	0x40014000

08006064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e042      	b.n	8006124 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb fa34 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2224      	movs	r2, #36	@ 0x24
 80060bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fc85 	bl	80069e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b0ba      	sub	sp, #232	@ 0xe8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800616a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10f      	bne.n	8006192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_UART_IRQHandler+0x66>
 800617e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fb69 	bl	8006862 <UART_Receive_IT>
      return;
 8006190:	e25b      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80de 	beq.w	8006358 <HAL_UART_IRQHandler+0x22c>
 800619c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80d1 	beq.w	8006358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_UART_IRQHandler+0xae>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xd2>
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	f043 0202 	orr.w	r2, r3, #2
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0xf6>
 800620a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621a:	f043 0204 	orr.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d011      	beq.n	8006252 <HAL_UART_IRQHandler+0x126>
 800622e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d105      	bne.n	8006246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800623a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624a:	f043 0208 	orr.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 81f2 	beq.w	8006640 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <HAL_UART_IRQHandler+0x14e>
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 faf4 	bl	8006862 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <HAL_UART_IRQHandler+0x17a>
 800629e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d04f      	beq.n	8006346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f9fc 	bl	80066a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d141      	bne.n	800633e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3314      	adds	r3, #20
 80062e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d9      	bne.n	80062ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d013      	beq.n	8006336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006312:	4a7e      	ldr	r2, [pc, #504]	@ (800650c <HAL_UART_IRQHandler+0x3e0>)
 8006314:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631a:	4618      	mov	r0, r3
 800631c:	f7fb fc74 	bl	8001c08 <HAL_DMA_Abort_IT>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006334:	e00e      	b.n	8006354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f99e 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633c:	e00a      	b.n	8006354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f99a 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	e006      	b.n	8006354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f996 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006352:	e175      	b.n	8006640 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	bf00      	nop
    return;
 8006356:	e173      	b.n	8006640 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 814f 	bne.w	8006600 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8148 	beq.w	8006600 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8141 	beq.w	8006600 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637e:	2300      	movs	r3, #0
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b40      	cmp	r3, #64	@ 0x40
 80063a0:	f040 80b6 	bne.w	8006510 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8145 	beq.w	8006644 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f080 813e 	bcs.w	8006644 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063da:	f000 8088 	beq.w	80064ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800640a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800640e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d9      	bne.n	80063de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3314      	adds	r3, #20
 8006430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800643a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3314      	adds	r3, #20
 800644a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800644e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e1      	bne.n	800642a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800648a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800648c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e3      	bne.n	8006466 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e3      	bne.n	80064ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fb fb1d 	bl	8001b28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	b29b      	uxth	r3, r3
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f8c1 	bl	800668c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800650a:	e09b      	b.n	8006644 <HAL_UART_IRQHandler+0x518>
 800650c:	0800676b 	.word	0x0800676b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006518:	b29b      	uxth	r3, r3
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 808e 	beq.w	8006648 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800652c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8089 	beq.w	8006648 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800654c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800655a:	647a      	str	r2, [r7, #68]	@ 0x44
 800655c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e3      	bne.n	8006536 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	623b      	str	r3, [r7, #32]
   return(result);
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3314      	adds	r3, #20
 800658e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006592:	633a      	str	r2, [r7, #48]	@ 0x30
 8006594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e3      	bne.n	800656e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065d8:	61fa      	str	r2, [r7, #28]
 80065da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69b9      	ldr	r1, [r7, #24]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	617b      	str	r3, [r7, #20]
   return(result);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e3      	bne.n	80065b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f847 	bl	800668c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065fe:	e023      	b.n	8006648 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HAL_UART_IRQHandler+0x4f4>
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f8ba 	bl	8006792 <UART_Transmit_IT>
    return;
 800661e:	e014      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00e      	beq.n	800664a <HAL_UART_IRQHandler+0x51e>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8fa 	bl	8006832 <UART_EndTransmit_IT>
    return;
 800663e:	e004      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
    return;
 8006640:	bf00      	nop
 8006642:	e002      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
      return;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <HAL_UART_IRQHandler+0x51e>
      return;
 8006648:	bf00      	nop
  }
}
 800664a:	37e8      	adds	r7, #232	@ 0xe8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b095      	sub	sp, #84	@ 0x54
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3314      	adds	r3, #20
 80066e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006700:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006718:	2b01      	cmp	r3, #1
 800671a:	d119      	bne.n	8006750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	60bb      	str	r3, [r7, #8]
   return(result);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f023 0310 	bic.w	r3, r3, #16
 8006732:	647b      	str	r3, [r7, #68]	@ 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673c:	61ba      	str	r2, [r7, #24]
 800673e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	613b      	str	r3, [r7, #16]
   return(result);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800675e:	bf00      	nop
 8006760:	3754      	adds	r7, #84	@ 0x54
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ff77 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b21      	cmp	r3, #33	@ 0x21
 80067a4:	d13e      	bne.n	8006824 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ae:	d114      	bne.n	80067da <UART_Transmit_IT+0x48>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d110      	bne.n	80067da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]
 80067d8:	e008      	b.n	80067ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	1c59      	adds	r1, r3, #1
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6211      	str	r1, [r2, #32]
 80067e4:	781a      	ldrb	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4619      	mov	r1, r3
 80067fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10f      	bne.n	8006820 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800680e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800681e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006848:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fefc 	bl	8006650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b08c      	sub	sp, #48	@ 0x30
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b22      	cmp	r3, #34	@ 0x22
 8006874:	f040 80ae 	bne.w	80069d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006880:	d117      	bne.n	80068b2 <UART_Receive_IT+0x50>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d113      	bne.n	80068b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006892:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	1c9a      	adds	r2, r3, #2
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80068b0:	e026      	b.n	8006900 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c4:	d007      	beq.n	80068d6 <UART_Receive_IT+0x74>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <UART_Receive_IT+0x82>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e008      	b.n	80068f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29b      	uxth	r3, r3
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4619      	mov	r1, r3
 800690e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006910:	2b00      	cmp	r3, #0
 8006912:	d15d      	bne.n	80069d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0220 	bic.w	r2, r2, #32
 8006922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0201 	bic.w	r2, r2, #1
 8006942:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006956:	2b01      	cmp	r3, #1
 8006958:	d135      	bne.n	80069c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	613b      	str	r3, [r7, #16]
   return(result);
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006980:	623a      	str	r2, [r7, #32]
 8006982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	69f9      	ldr	r1, [r7, #28]
 8006986:	6a3a      	ldr	r2, [r7, #32]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	61bb      	str	r3, [r7, #24]
   return(result);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b10      	cmp	r3, #16
 80069a0:	d10a      	bne.n	80069b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fe64 	bl	800668c <HAL_UARTEx_RxEventCallback>
 80069c4:	e002      	b.n	80069cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fe4c 	bl	8006664 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e002      	b.n	80069d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3730      	adds	r7, #48	@ 0x30
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069e4:	b0c0      	sub	sp, #256	@ 0x100
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	68d9      	ldr	r1, [r3, #12]
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	ea40 0301 	orr.w	r3, r0, r1
 8006a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a38:	f021 010c 	bic.w	r1, r1, #12
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a46:	430b      	orrs	r3, r1
 8006a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5a:	6999      	ldr	r1, [r3, #24]
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	ea40 0301 	orr.w	r3, r0, r1
 8006a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b8f      	ldr	r3, [pc, #572]	@ (8006cac <UART_SetConfig+0x2cc>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d005      	beq.n	8006a80 <UART_SetConfig+0xa0>
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8006cb0 <UART_SetConfig+0x2d0>)
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d104      	bne.n	8006a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a80:	f7fd ffc4 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 8006a84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a88:	e003      	b.n	8006a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a8a:	f7fd ffab 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8006a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9c:	f040 810c 	bne.w	8006cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	1891      	adds	r1, r2, r2
 8006ab8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006aba:	415b      	adcs	r3, r3
 8006abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	eb12 0801 	adds.w	r8, r2, r1
 8006ac8:	4629      	mov	r1, r5
 8006aca:	eb43 0901 	adc.w	r9, r3, r1
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ae2:	4690      	mov	r8, r2
 8006ae4:	4699      	mov	r9, r3
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	eb18 0303 	adds.w	r3, r8, r3
 8006aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006af0:	462b      	mov	r3, r5
 8006af2:	eb49 0303 	adc.w	r3, r9, r3
 8006af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b0e:	460b      	mov	r3, r1
 8006b10:	18db      	adds	r3, r3, r3
 8006b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b14:	4613      	mov	r3, r2
 8006b16:	eb42 0303 	adc.w	r3, r2, r3
 8006b1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b24:	f7f9 fb56 	bl	80001d4 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4b61      	ldr	r3, [pc, #388]	@ (8006cb4 <UART_SetConfig+0x2d4>)
 8006b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	011c      	lsls	r4, r3, #4
 8006b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	1891      	adds	r1, r2, r2
 8006b4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b50:	415b      	adcs	r3, r3
 8006b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b58:	4641      	mov	r1, r8
 8006b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b5e:	4649      	mov	r1, r9
 8006b60:	eb43 0b01 	adc.w	fp, r3, r1
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b78:	4692      	mov	sl, r2
 8006b7a:	469b      	mov	fp, r3
 8006b7c:	4643      	mov	r3, r8
 8006b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b86:	464b      	mov	r3, r9
 8006b88:	eb4b 0303 	adc.w	r3, fp, r3
 8006b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	18db      	adds	r3, r3, r3
 8006ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006baa:	4613      	mov	r3, r2
 8006bac:	eb42 0303 	adc.w	r3, r2, r3
 8006bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bba:	f7f9 fb0b 	bl	80001d4 <__aeabi_uldivmod>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8006cb4 <UART_SetConfig+0x2d4>)
 8006bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2264      	movs	r2, #100	@ 0x64
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	1acb      	subs	r3, r1, r3
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bda:	4b36      	ldr	r3, [pc, #216]	@ (8006cb4 <UART_SetConfig+0x2d4>)
 8006bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8006be0:	095b      	lsrs	r3, r3, #5
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006be8:	441c      	add	r4, r3
 8006bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	1891      	adds	r1, r2, r2
 8006c02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c04:	415b      	adcs	r3, r3
 8006c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c0c:	4641      	mov	r1, r8
 8006c0e:	1851      	adds	r1, r2, r1
 8006c10:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c12:	4649      	mov	r1, r9
 8006c14:	414b      	adcs	r3, r1
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c24:	4659      	mov	r1, fp
 8006c26:	00cb      	lsls	r3, r1, #3
 8006c28:	4651      	mov	r1, sl
 8006c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c2e:	4651      	mov	r1, sl
 8006c30:	00ca      	lsls	r2, r1, #3
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	4603      	mov	r3, r0
 8006c38:	4642      	mov	r2, r8
 8006c3a:	189b      	adds	r3, r3, r2
 8006c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c40:	464b      	mov	r3, r9
 8006c42:	460a      	mov	r2, r1
 8006c44:	eb42 0303 	adc.w	r3, r2, r3
 8006c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c60:	460b      	mov	r3, r1
 8006c62:	18db      	adds	r3, r3, r3
 8006c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c66:	4613      	mov	r3, r2
 8006c68:	eb42 0303 	adc.w	r3, r2, r3
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c76:	f7f9 faad 	bl	80001d4 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <UART_SetConfig+0x2d4>)
 8006c80:	fba3 1302 	umull	r1, r3, r3, r2
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	2164      	movs	r1, #100	@ 0x64
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	3332      	adds	r3, #50	@ 0x32
 8006c92:	4a08      	ldr	r2, [pc, #32]	@ (8006cb4 <UART_SetConfig+0x2d4>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f003 0207 	and.w	r2, r3, #7
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4422      	add	r2, r4
 8006ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ca8:	e106      	b.n	8006eb8 <UART_SetConfig+0x4d8>
 8006caa:	bf00      	nop
 8006cac:	40011000 	.word	0x40011000
 8006cb0:	40011400 	.word	0x40011400
 8006cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006cca:	4642      	mov	r2, r8
 8006ccc:	464b      	mov	r3, r9
 8006cce:	1891      	adds	r1, r2, r2
 8006cd0:	6239      	str	r1, [r7, #32]
 8006cd2:	415b      	adcs	r3, r3
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cda:	4641      	mov	r1, r8
 8006cdc:	1854      	adds	r4, r2, r1
 8006cde:	4649      	mov	r1, r9
 8006ce0:	eb43 0501 	adc.w	r5, r3, r1
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	00eb      	lsls	r3, r5, #3
 8006cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cf2:	00e2      	lsls	r2, r4, #3
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	4643      	mov	r3, r8
 8006cfa:	18e3      	adds	r3, r4, r3
 8006cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d00:	464b      	mov	r3, r9
 8006d02:	eb45 0303 	adc.w	r3, r5, r3
 8006d06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	f04f 0300 	mov.w	r3, #0
 8006d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d26:	4629      	mov	r1, r5
 8006d28:	008b      	lsls	r3, r1, #2
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d30:	4621      	mov	r1, r4
 8006d32:	008a      	lsls	r2, r1, #2
 8006d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d38:	f7f9 fa4c 	bl	80001d4 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4b60      	ldr	r3, [pc, #384]	@ (8006ec4 <UART_SetConfig+0x4e4>)
 8006d42:	fba3 2302 	umull	r2, r3, r3, r2
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	011c      	lsls	r4, r3, #4
 8006d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	1891      	adds	r1, r2, r2
 8006d62:	61b9      	str	r1, [r7, #24]
 8006d64:	415b      	adcs	r3, r3
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	1851      	adds	r1, r2, r1
 8006d70:	6139      	str	r1, [r7, #16]
 8006d72:	4649      	mov	r1, r9
 8006d74:	414b      	adcs	r3, r1
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d84:	4659      	mov	r1, fp
 8006d86:	00cb      	lsls	r3, r1, #3
 8006d88:	4651      	mov	r1, sl
 8006d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d8e:	4651      	mov	r1, sl
 8006d90:	00ca      	lsls	r2, r1, #3
 8006d92:	4610      	mov	r0, r2
 8006d94:	4619      	mov	r1, r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	4642      	mov	r2, r8
 8006d9a:	189b      	adds	r3, r3, r2
 8006d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006da0:	464b      	mov	r3, r9
 8006da2:	460a      	mov	r2, r1
 8006da4:	eb42 0303 	adc.w	r3, r2, r3
 8006da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006db6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	008b      	lsls	r3, r1, #2
 8006dc8:	4641      	mov	r1, r8
 8006dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dce:	4641      	mov	r1, r8
 8006dd0:	008a      	lsls	r2, r1, #2
 8006dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006dd6:	f7f9 f9fd 	bl	80001d4 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	4b38      	ldr	r3, [pc, #224]	@ (8006ec4 <UART_SetConfig+0x4e4>)
 8006de2:	fba3 2301 	umull	r2, r3, r3, r1
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2264      	movs	r2, #100	@ 0x64
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	1acb      	subs	r3, r1, r3
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	3332      	adds	r3, #50	@ 0x32
 8006df4:	4a33      	ldr	r2, [pc, #204]	@ (8006ec4 <UART_SetConfig+0x4e4>)
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e00:	441c      	add	r4, r3
 8006e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e06:	2200      	movs	r2, #0
 8006e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	1891      	adds	r1, r2, r2
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	415b      	adcs	r3, r3
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e20:	4641      	mov	r1, r8
 8006e22:	1851      	adds	r1, r2, r1
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	4649      	mov	r1, r9
 8006e28:	414b      	adcs	r3, r1
 8006e2a:	607b      	str	r3, [r7, #4]
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e38:	4659      	mov	r1, fp
 8006e3a:	00cb      	lsls	r3, r1, #3
 8006e3c:	4651      	mov	r1, sl
 8006e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e42:	4651      	mov	r1, sl
 8006e44:	00ca      	lsls	r2, r1, #3
 8006e46:	4610      	mov	r0, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e52:	464b      	mov	r3, r9
 8006e54:	460a      	mov	r2, r1
 8006e56:	eb42 0303 	adc.w	r3, r2, r3
 8006e5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e66:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e74:	4649      	mov	r1, r9
 8006e76:	008b      	lsls	r3, r1, #2
 8006e78:	4641      	mov	r1, r8
 8006e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e7e:	4641      	mov	r1, r8
 8006e80:	008a      	lsls	r2, r1, #2
 8006e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e86:	f7f9 f9a5 	bl	80001d4 <__aeabi_uldivmod>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <UART_SetConfig+0x4e4>)
 8006e90:	fba3 1302 	umull	r1, r3, r3, r2
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	2164      	movs	r1, #100	@ 0x64
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	3332      	adds	r3, #50	@ 0x32
 8006ea2:	4a08      	ldr	r2, [pc, #32]	@ (8006ec4 <UART_SetConfig+0x4e4>)
 8006ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f003 020f 	and.w	r2, r3, #15
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4422      	add	r2, r4
 8006eb6:	609a      	str	r2, [r3, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec4:	51eb851f 	.word	0x51eb851f

08006ec8 <memset>:
 8006ec8:	4402      	add	r2, r0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d100      	bne.n	8006ed2 <memset+0xa>
 8006ed0:	4770      	bx	lr
 8006ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed6:	e7f9      	b.n	8006ecc <memset+0x4>

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4d0d      	ldr	r5, [pc, #52]	@ (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	@ (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1b64      	subs	r4, r4, r5
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	@ (8006f1c <__libc_init_array+0x44>)
 8006eec:	f000 f818 	bl	8006f20 <_init>
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	08006f74 	.word	0x08006f74
 8006f14:	08006f74 	.word	0x08006f74
 8006f18:	08006f74 	.word	0x08006f74
 8006f1c:	08006f78 	.word	0x08006f78

08006f20 <_init>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr

08006f2c <_fini>:
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2e:	bf00      	nop
 8006f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f32:	bc08      	pop	{r3}
 8006f34:	469e      	mov	lr, r3
 8006f36:	4770      	bx	lr
